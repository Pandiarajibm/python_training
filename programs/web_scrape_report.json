{"website_title": "Beautiful Soup Documentation \u2014 Beautiful Soup 4.13.0 documentation", "all_urls": ["http://www.crummy.com/software/BeautifulSoup/", "http://www.crummy.com/software/BeautifulSoup/bs3/documentation.html", "https://www.crummy.com/software/BeautifulSoup/bs4/doc.zh/", "http://kondou.com/BS4/", "https://www.crummy.com/software/BeautifulSoup/bs4/doc.ko/", "https://www.crummy.com/software/BeautifulSoup/bs4/doc.ptbr", "https://www.crummy.com/software/BeautifulSoup/bs4/doc.es/", "https://www.crummy.com/software/BeautifulSoup/bs4/doc.ru/", "https://groups.google.com/forum/?fromgroups#!forum/beautifulsoup", "http://www.crummy.com/software/BeautifulSoup/bs3/documentation.html", "http://www.crummy.com/software/BeautifulSoup/download/4.x/", "http://lxml.de/", "http://code.google.com/p/html5lib/", "https://www.w3.org/TR/REC-xml/#sec-prolog-dtd", "https://www.w3.org/TR/REC-xml/#dt-doctype", "https://www.w3.org/TR/REC-xml/#sec-cdata-sect", "https://www.w3.org/TR/REC-xml/#sec-pi", "https://facelessuser.github.io/soupsieve/", "https://facelessuser.github.io/soupsieve/selectors/", "https://facelessuser.github.io/soupsieve/", "http://www.w3.org/TR/html5/syntax.html#syntax", "http://wiki.python.org/moin/PrintFails", "http://lxml.de/", "http://pypi.python.org/pypi/cchardet/", "https://www.crummy.com/software/BeautifulSoup/download/3.x/BeautifulSoup-3.2.2.tar.gz", "http://www.crummy.com/software/BeautifulSoup/bs3/documentation.html", "http://www.python.org/dev/peps/pep-0008/", "https://www.sphinx-doc.org/", "https://alabaster.readthedocs.io"], "all_paragraphs": ["Beautiful Soup is a\nPython library for pulling data out of HTML and XML files. It works\nwith your favorite parser to provide idiomatic ways of navigating,\nsearching, and modifying the parse tree. It commonly saves programmers\nhours or days of work.", "These instructions illustrate all major features of Beautiful Soup 4,\nwith examples. I show you what the library is good for, how it works,\nhow to use it, how to make it do what you want, and what to do when it\nviolates your expectations.", "This document covers Beautiful Soup version 4.13.3. The examples in\nthis documentation were written for Python 3.8.", "You might be looking for the documentation for Beautiful Soup 3.\nIf so, you should know that Beautiful Soup 3 is no longer being\ndeveloped and that all support for it was dropped on December\n31, 2020. If you want to learn about the differences between Beautiful\nSoup 3 and Beautiful Soup 4, see Porting code to BS4.", "This documentation has been translated into other languages by\nBeautiful Soup users:", "\u8fd9\u7bc7\u6587\u6863\u5f53\u7136\u8fd8\u6709\u4e2d\u6587\u7248.", "\u3053\u306e\u30da\u30fc\u30b8\u306f\u65e5\u672c\u8a9e\u3067\u5229\u7528\u3067\u304d\u307e\u3059(\u5916\u90e8\u30ea\u30f3\u30af)", "\uc774 \ubb38\uc11c\ub294 \ud55c\uad6d\uc5b4 \ubc88\uc5ed\ub3c4 \uac00\ub2a5\ud569\ub2c8\ub2e4.", "Este documento tamb\u00e9m est\u00e1 dispon\u00edvel em Portugu\u00eas do Brasil.", "Este documento tambi\u00e9n est\u00e1 disponible en una traducci\u00f3n al espa\u00f1ol.", "\u042d\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430 \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u043e\u043c \u044f\u0437\u044b\u043a\u0435.", "If you have questions about Beautiful Soup, or run into problems,\nsend mail to the discussion group. If\nyour problem involves parsing an HTML document, be sure to mention\nwhat the diagnose() function says about\nthat document.", "When reporting an error in this documentation, please mention which\ntranslation you're reading.", "This document is written like an instruction manual, but you can also read\ntraditional API documentation\ngenerated from the Beautiful Soup source code. If you want details\nabout Beautiful Soup's internals, or a feature not covered in this\ndocument, try the API documentation.", "Here's an HTML document I'll be using as an example throughout this\ndocument. It's part of a story from Alice in Wonderland:", "Running the \"three sisters\" document through Beautiful Soup gives us a\nBeautifulSoup object, which represents the document as a nested\ndata structure:", "Here are some simple ways to navigate that data structure:", "One common task is extracting all the URLs found within a page's <a> tags:", "Another common task is extracting all the text from a page:", "Does this look like what you need? If so, read on.", "If you're using a recent version of Debian or Ubuntu Linux, you can\ninstall Beautiful Soup with the system package manager:", "$ apt-get install python3-bs4", "Beautiful Soup 4 is published through PyPi, so if you can't install it\nwith the system packager, you can install it with easy_install or\npip. The package name is beautifulsoup4. Make sure you use the\nright version of pip or easy_install for your Python version\n(these may be named pip3 and easy_install3 respectively).", "$ easy_install beautifulsoup4", "$ pip install beautifulsoup4", "(The BeautifulSoup package is not what you want. That's\nthe previous major release, Beautiful Soup 3. Lots of software uses\nBS3, so it's still available, but if you're writing new code you\nshould install beautifulsoup4.)", "If you don't have easy_install or pip installed, you can\ndownload the Beautiful Soup 4 source tarball and\ninstall it with setup.py.", "$ python setup.py install", "If all else fails, the license for Beautiful Soup allows you to\npackage the entire library with your application. You can download the\ntarball, copy its bs4 directory into your application's codebase,\nand use Beautiful Soup without installing it at all.", "I use Python 3.10 to develop Beautiful Soup, but it should work with\nother recent versions.", "Beautiful Soup supports the HTML parser included in Python's standard\nlibrary, but it also supports a number of third-party Python parsers.\nOne is the lxml parser. Depending on your setup,\nyou might install lxml with one of these commands:", "$ apt-get install python-lxml", "$ easy_install lxml", "$ pip install lxml", "Another alternative is the pure-Python html5lib parser, which parses HTML the way a\nweb browser does. Depending on your setup, you might install html5lib\nwith one of these commands:", "$ apt-get install python3-html5lib", "$ pip install html5lib", "This table summarizes the advantages and disadvantages of each parser library:", "Parser", "Typical usage", "Advantages", "Disadvantages", "Python's html.parser", "BeautifulSoup(markup, \"html.parser\")", "Batteries included", "Decent speed", "Not as fast as lxml,\nless lenient than\nhtml5lib.", "lxml's HTML parser", "BeautifulSoup(markup, \"lxml\")", "Very fast", "External C dependency", "lxml's XML parser", "BeautifulSoup(markup, \"lxml-xml\")\nBeautifulSoup(markup, \"xml\")", "Very fast", "The only currently supported\nXML parser", "External C dependency", "html5lib", "BeautifulSoup(markup, \"html5lib\")", "Extremely lenient", "Parses pages the same way a\nweb browser does", "Creates valid HTML5", "Very slow", "External Python\ndependency", "If you can, I recommend you install and use lxml for speed.", "Note that if a document is invalid, different parsers will generate\ndifferent Beautiful Soup trees for it. See Differences\nbetween parsers for details.", "To parse a document, pass it into the BeautifulSoup\nconstructor. You can pass in a string or an open filehandle:", "First, the document is converted to Unicode, and HTML entities are\nconverted to Unicode characters:", "Beautiful Soup then parses the document using the best available\nparser. It will use an HTML parser unless you specifically tell it to\nuse an XML parser. (See Parsing XML.)", "Beautiful Soup transforms a complex HTML document into a complex tree\nof Python objects. But you'll only ever have to deal with about four\nkinds of objects: Tag, NavigableString, BeautifulSoup,\nand Comment. These objects represent the HTML elements\nthat comprise the page.", "A Tag object corresponds to an XML or HTML tag in the original document.", "Tags have a lot of attributes and methods, and I'll cover most of them\nin Navigating the tree and Searching the tree. For now, the most\nimportant methods of a tag are for accessing its name and attributes.", "Every tag has a name:", "If you change a tag's name, the change will be reflected in any\nmarkup generated by Beautiful Soup down the line:", "An HTML or XML tag may have any number of attributes. The tag <b\nid=\"boldest\"> has an attribute \"id\" whose value is\n\"boldest\". You can access a tag's attributes by treating the tag like\na dictionary:", "You can access the dictionary of attributes directly as .attrs:", "You can add, remove, and modify a tag's attributes. Again, this is\ndone by treating the tag as a dictionary:", "HTML 4 defines a few attributes that can have multiple values. HTML 5\nremoves a couple of them, but defines a few more. The most common\nmulti-valued attribute is class (that is, a tag can have more than\none CSS class). Others include rel, rev, accept-charset,\nheaders, and accesskey. By default, Beautiful Soup stores the value(s)\nof a multi-valued attribute as a list:", "When you turn a tag back into a string, the values of any multi-valued\nattributes are consolidated:", "If an attribute looks like it has more than one value, but it's not\na multi-valued attribute as defined by any version of the HTML\nstandard, Beautiful Soup stores it as a simple string:", "You can force all attributes to be stored as strings by passing\nmulti_valued_attributes=None as a keyword argument into the\nBeautifulSoup constructor:", "You can use get_attribute_list to always return the value in a list\ncontainer, whether it's a string or multi-valued attribute value:", "If you parse a document as XML, there are no multi-valued attributes:", "Again, you can configure this using the multi_valued_attributes argument:", "You probably won't need to do this, but if you do, use the defaults as\na guide. They implement the rules described in the HTML specification:", "A tag can contain strings as pieces of text. Beautiful Soup\nuses the NavigableString class to contain these pieces of text:", "A NavigableString is just like a Python Unicode string, except\nthat it also supports some of the features described in Navigating\nthe tree and Searching the tree. You can convert a\nNavigableString to a Unicode string with str:", "You can't edit a string in place, but you can replace one string with\nanother, using replace_with():", "NavigableString supports most of the features described in\nNavigating the tree and Searching the tree, but not all of\nthem. In particular, since a string can't contain anything (the way a\ntag may contain a string or another tag), strings don't support the\n.contents or .string attributes, or the find() method.", "If you want to use a NavigableString outside of Beautiful Soup,\nyou should call unicode() on it to turn it into a normal Python\nUnicode string. If you don't, your string will carry around a\nreference to the entire Beautiful Soup parse tree, even when you're\ndone using Beautiful Soup. This is a big waste of memory.", "The BeautifulSoup object represents the parsed document as a\nwhole. For most purposes, you can treat it as a Tag\nobject. This means it supports most of the methods described in\nNavigating the tree and Searching the tree.", "You can also pass a BeautifulSoup object into one of the methods\ndefined in Modifying the tree, just as you would a Tag. This\nlets you do things like combine two parsed documents:", "Since the BeautifulSoup object doesn't correspond to an actual\nHTML or XML tag, it has no name and no attributes. But sometimes it's\nuseful to reference its .name (such as when writing code that works\nwith both Tag and BeautifulSoup objects),\nso it's been given the special .name \"[document]\":", "Tag, NavigableString, and\nBeautifulSoup cover almost everything you'll see in an\nHTML or XML file, but there are a few leftover bits. The main one\nyou'll probably encounter is the Comment.", "The Comment object is just a special type of NavigableString:", "But when it appears as part of an HTML document, a Comment is\ndisplayed with special formatting:", "Beautiful Soup defines a few NavigableString subclasses to\ncontain strings found inside specific HTML tags. This makes it easier\nto pick out the main body of the page, by ignoring strings that\nprobably represent programming directives found within the\npage. (These classes are new in Beautiful Soup 4.9.0, and the\nhtml5lib parser doesn't use them.)", "A NavigableString subclass that represents embedded CSS\nstylesheets; that is, any strings found inside a <style> tag\nduring document parsing.", "A NavigableString subclass that represents embedded\nJavascript; that is, any strings found inside a <script> tag\nduring document parsing.", "A NavigableString subclass that represents embedded HTML\ntemplates; that is, any strings found inside a <template> tag during\ndocument parsing.", "Beautiful Soup defines some NavigableString classes for\nholding special types of strings that can be found in XML\ndocuments. Like Comment, these classes are subclasses of\nNavigableString that add something extra to the string on\noutput.", "A NavigableString subclass representing the declaration at the beginning of\nan XML document.", "A NavigableString subclass representing the document type\ndeclaration which may\nbe found near the beginning of an XML document.", "A NavigableString subclass that represents a CData section.", "A NavigableString subclass that represents the contents\nof an XML processing instruction.", "Here's the \"Three sisters\" HTML document again:", "I'll use this as an example to show you how to move from one part of\na document to another.", "Tags may contain strings and more tags. These elements are the tag's\nchildren. Beautiful Soup provides a lot of different attributes for\nnavigating and iterating over a tag's children.", "Note that Beautiful Soup strings don't support any of these\nattributes, because a string can't have children.", "The simplest way to navigate the parse tree is to find a tag by name. To\ndo this, you can use the find() method:", "For convenience, just saying the name of the tag you want is equivalent\nto find() (if no built-in attribute has that name). If you want the\n<head> tag, just say soup.head:", "You can use this trick again and again to zoom in on a certain part\nof the parse tree. This code gets the first <b> tag beneath the <body> tag:", "find() (and its convenience equivalent) gives you only the first tag\nby that name:", "If you need to get all the <a> tags, you can use find_all():", "For more complicated tasks, such as pattern-matching and filtering, you can\nuse the methods described in Searching the tree.", "A tag's children are available in a list called .contents:", "The BeautifulSoup object itself has children. In this case, the\n<html> tag is the child of the BeautifulSoup object.:", "A string does not have .contents, because it can't contain\nanything:", "Instead of getting them as a list, you can iterate over a tag's\nchildren using the .children generator:", "If you want to modify a tag's children, use the methods described in\nModifying the tree. Don't modify the the .contents list\ndirectly: that can lead to problems that are subtle and difficult to\nspot.", "The .contents and .children attributes consider only a tag's\ndirect children. For instance, the <head> tag has a single direct\nchild\u2014the <title> tag:", "But the <title> tag itself has a child: the string \"The Dormouse's\nstory\". There's a sense in which that string is also a child of the\n<head> tag. The .descendants attribute lets you iterate over all\nof a tag's children, recursively: its direct children, the children of\nits direct children, and so on:", "The <head> tag has only one child, but it has two descendants: the\n<title> tag and the <title> tag's child. The BeautifulSoup object\nonly has one direct child (the <html> tag), but it has a whole lot of\ndescendants:", "If a tag has only one child, and that child is a NavigableString,\nthe child is made available as .string:", "If a tag's only child is another tag, and that tag has a\n.string, then the parent tag is considered to have the same\n.string as its child:", "If a tag contains more than one thing, then it's not clear what\n.string should refer to, so .string is defined to be\nNone:", "If there's more than one thing inside a tag, you can still look at\njust the strings. Use the .strings generator to see all descendant\nstrings:", "Newlines and spaces that separate tags are also strings. You can remove extra\nwhitespace by using the .stripped_strings generator instead:", "Here, strings consisting entirely of whitespace are ignored, and\nwhitespace at the beginning and end of strings is removed.", "Continuing the \"family tree\" analogy, every tag and every string has a\nparent: the tag that contains it.", "You can access an element's parent with the .parent attribute. In\nthe example \"three sisters\" document, the <head> tag is the parent\nof the <title> tag:", "The title string itself has a parent: the <title> tag that contains\nit:", "The parent of a top-level tag like <html> is the BeautifulSoup object\nitself:", "And the .parent of a BeautifulSoup object is defined as None:", "You can iterate over all of an element's parents with\n.parents. This example uses .parents to travel from an <a> tag\nburied deep within the document, to the very top of the document:", "The .self_and_parents generator is a variant of .parents which\ngives you the entire ancestry of an element, including the element\nitself:", "Consider a simple document like this:", "The <b> tag and the <c> tag are at the same level: they're both direct\nchildren of the same tag. We call them siblings. When a document is\npretty-printed, siblings show up at the same indentation level. You\ncan also use this relationship in the code you write.", "You can use .next_sibling and .previous_sibling to navigate\nbetween page elements that are on the same level of the parse tree:", "The <b> tag has a .next_sibling, but no .previous_sibling,\nbecause there's nothing before the <b> tag on the same level of the\ntree. For the same reason, the <c> tag has a .previous_sibling\nbut no .next_sibling:", "The strings \"text1\" and \"text2\" are not siblings, because they don't\nhave the same parent:", "In real documents, the .next_sibling or .previous_sibling of a\ntag will usually be a string containing whitespace. Going back to the\n\"three sisters\" document:", "You might think that the .next_sibling of the first <a> tag would\nbe the second <a> tag. But actually, it's a string: the comma and\nnewline that separate the first <a> tag from the second:", "The second <a> tag is then the .next_sibling of the comma string:", "You can iterate over a tag's siblings with .next_siblings or\n.previous_siblings:", "(If the argument syntax to find tags by their attribute value is unfamiliar,\ndon't worry; this is covered later in The keyword arguments.)", "Take a look at the beginning of the \"three sisters\" document:", "An HTML parser takes this string of characters and turns it into a\nseries of events: \"open an <html> tag\", \"open a <head> tag\", \"open a\n<title> tag\", \"add a string\", \"close the <title> tag\", \"open a <p>\ntag\", and so on. The order in which the opening tags and strings are\nencountered is called document order. Beautiful Soup offers tools for\nsearching a document's elements in document order.", "The .next_element attribute of a string or tag points to whatever\nwas parsed immediately after the opening of the current tag or after\nthe current string. It might be the same as .next_sibling, but it's\nusually drastically different.", "Here's the final <a> tag in the \"three sisters\" document. Its\n.next_sibling is a string: the conclusion of the sentence that was\ninterrupted by the start of the <a> tag:", "But the .next_element of that <a> tag, the thing that was parsed\nimmediately after the <a> tag, is not the rest of that sentence:\nit's the string \"Tillie\" inside it:", "That's because in the original markup, the word \"Tillie\" appeared\nbefore that semicolon. The parser encountered an <a> tag, then the\nword \"Tillie\", then the closing </a> tag, then the semicolon and rest of\nthe sentence. The semicolon is on the same level as the <a> tag, but the\nword \"Tillie\" was encountered first.", "The .previous_element attribute is the exact opposite of\n.next_element. It points to the opening tag or string that was\nparsed immediately before this one:", "You should get the idea by now. You can use these iterators to move\nforward or backward in the document as it was parsed:", "Beautiful Soup defines a lot of methods for searching the parse tree,\nbut they're all very similar. I'm going to spend a lot of time explaining\nthe two most popular methods: find() and find_all(). The other\nmethods take almost exactly the same arguments, so I'll just cover\nthem briefly.", "Once again, I'll be using the \"three sisters\" document as an example:", "By passing in a filter to a method like find_all(), you can\nzoom in on the parts of the document you're interested in.", "Before talking in detail about find_all() and similar methods, I\nwant to show examples of different filters you can pass into these\nmethods. These filters show up again and again, throughout the\nsearch API. You can use them to filter based on a tag's name,\non its attributes, on the text of a string, or on some combination of\nthese.", "The simplest filter is a string. Pass a string to a search method and\nBeautiful Soup will perform a tag-name match against that exact string.\nThis code finds all the <b> tags in the document:", "If you pass in a byte string, Beautiful Soup will assume the string is\nencoded as UTF-8. You can avoid this by passing in a Unicode string instead.", "If you pass in a regular expression object, Beautiful Soup will filter\nagainst that regular expression using its search() method. This code\nfinds all the tags whose names start with the letter \"b\"; in this\ncase, the <body> tag and the <b> tag:", "This code finds all the tags whose names contain the letter 't':", "The value True matches every tag it can. This code finds all\nthe tags in the document, but none of the text strings:", "If none of the other matches work for you, define a function that\ntakes an element as its only argument. The function should return\nTrue if the argument matches, and False otherwise.", "Here's a function that returns True if a tag defines the \"class\"\nattribute but doesn't define the \"id\" attribute:", "Pass this function into find_all() and you'll pick up all the <p>\ntags:", "This function picks up only the <p> tags. It doesn't pick up the <a>\ntags, because those tags define both \"class\" and \"id\". It doesn't pick\nup tags like <html> and <title>, because those tags don't define\n\"class\".", "The function can be as complicated as you need it to be. Here's a\nfunction that returns True if a tag is surrounded by string\nobjects:", "If you pass in a list, Beautiful Soup will look for a match against\nany string, regular expression, or function in that list. This\ncode finds all the <a> tags and all the <b> tags:", "Now we're ready to look at the search methods in detail.", "Method signature: find_all(name, attrs, recursive, string, limit, **kwargs)", "The find_all() method looks through a tag's descendants and\nretrieves all descendants that match your filters. I gave several\nexamples in Kinds of filters, but here are a few more:", "Some of these should look familiar, but others are new. What does it\nmean to pass in a value for string, or id? Why does\nfind_all(\"p\", \"title\") find a <p> tag with the CSS class \"title\"?\nLet's look at the arguments to find_all().", "Pass in a value for name and you'll tell Beautiful Soup to only\nconsider tags with certain names. Text strings will be ignored, as\nwill tags whose names that don't match.", "This is the simplest usage:", "Recall from Kinds of filters that the value to name can be a\nstring, a regular expression, a list, a function, or the value\nTrue.", "Any keyword argument that's not recognized will be turned into a filter\nthat matches tags by their attributes.", "If you pass in a value for an argument called id, Beautiful Soup will\nfilter against each tag's 'id' attribute value:", "Just as with tags, you can filter an attribute based on a string,\na regular expression, a list, a function, or the value True.", "If you pass in a regular expression object for href, Beautiful Soup will\npattern-match against each tag's 'href' attribute value:", "The value True matches every tag that defines the attribute. This code\nfinds all tags with an id attribute:", "For more complex matches, you can define a function that takes an attribute\nvalue as its only argument. The function should return True if the value\nmatches, and False otherwise.", "Here's a function that finds all a tags whose href attribute does not\nmatch a regular expression:", "If you pass in a list for an argument, Beautiful Soup will look for an\nattribute-value match against any string, regular expression, or function in\nthat list. This code finds the first and last link:", "You can filter against multiple attributes at once by passing multiple\nkeyword arguments:", "Some attributes, like the data-* attributes in HTML 5, have names that\ncan't be used as the names of keyword arguments:", "You can use these attributes in searches by putting them into a\ndictionary and passing the dictionary into find_all() as the\nattrs argument:", "Similarly, you can't use a keyword argument to search for HTML's 'name' attribute,\nbecause Beautiful Soup uses the name argument to contain the name\nof the tag itself. Instead, you can give a value to 'name' in the\nattrs argument:", "It's very useful to search for a tag that has a certain CSS class, but\nthe name of the CSS attribute, \"class\", is a reserved word in\nPython. Using class as a keyword argument will give you a syntax\nerror. As of Beautiful Soup 4.1.2, you can search by CSS class using\nthe keyword argument class_:", "As with any keyword argument, you can pass class_ a string, a regular\nexpression, a function, or True:", "Remember that a single tag can have multiple\nvalues for its \"class\" attribute. When you search for a tag that\nmatches a certain CSS class, you're matching against any of its CSS\nclasses:", "You can also search for the exact string value of the class attribute:", "But searching for variants of the string value won't work:", "In older versions of Beautiful Soup, which don't have the class_\nshortcut, you can use the attrs argument trick mentioned above.\nCreate a dictionary whose value for \"class\" is the string (or regular\nexpression, or whatever) you want to search for:", "To search for tags that match two or more CSS classes at once, use the\nTag.select() CSS selector method described here:", "With the string argument, you can search for strings instead of tags. As\nwith name and attribute keyword arguments, you can pass in a string, a\nregular expression, a function, a list, or the value True.\nHere are some examples:", "If you use the string argument in a tag search, Beautiful Soup will find\nall tags whose .string matches your value for string. This code finds\nthe <a> tags whose .string is \"Elsie\":", "The string argument is new in Beautiful Soup 4.4.0. In earlier\nversions it was called text:", "find_all() returns all the tags and strings that match your\nfilters. This can take a while if the document is large. If you don't\nneed all the results, you can pass in a number for limit. This\nworks just like the LIMIT keyword in SQL. It tells Beautiful Soup to\nstop gathering results after it's found a certain number.", "There are three links in the \"three sisters\" document, but this code\nonly finds the first two:", "By default, mytag.find_all() will examine all the descendants of mytag:\nits children, its children's children, and so on. To consider only direct\nchildren, you can pass in recursive=False. See the difference here:", "Here's that part of the document:", "The <title> tag is beneath the <html> tag, but it's not directly\nbeneath the <html> tag: the <head> tag is in the way. Beautiful Soup\nfinds the <title> tag when it's allowed to look at all descendants of\nthe <html> tag, but when recursive=False restricts it to the\n<html> tag's immediate children, it finds nothing.", "Beautiful Soup offers a lot of tree-searching methods (covered below),\nand they mostly take the same arguments as find_all(): name,\nattrs, string, limit, and attribute keyword arguments. But the\nrecursive argument is specific to the find_all() and find() methods.\nPassing recursive=False into a method like find_parents() wouldn't be\nvery useful.", "For convenience, calling a BeautifulSoup object or\nTag object as a function is equivalent to calling\nfind_all() (if no built-in method has the name of the tag you're\nlooking for). These two lines of code are equivalent:", "These two lines are also equivalent:", "Method signature: find(name, attrs, recursive, string, **kwargs)", "The find_all() method scans the entire document looking for\nresults, but sometimes you only want to find one result. If you know a\ndocument has only one <body> tag, it's a waste of time to scan the\nentire document looking for more. Rather than passing in limit=1\nevery time you call find_all, you can use the find()\nmethod. These two lines of code are nearly equivalent:", "The only difference is that find_all() returns a list containing\nthe single result, and find() just returns the result.", "If find_all() can't find anything, it returns an empty list. If\nfind() can't find anything, it returns None:", "Remember the soup.head.title trick from Navigating using tag\nnames? That trick works by repeatedly calling find():", "Method signature: find_parents(name, attrs, string, limit, **kwargs)", "Method signature: find_parent(name, attrs, string, **kwargs)", "I spent a lot of time above covering find_all() and\nfind(). The Beautiful Soup API defines ten other methods for\nsearching the tree, but don't be afraid. Five of these methods are\nbasically the same as find_all(), and the other five are basically\nthe same as find(). The only differences are in how they move from\none part of the tree to another.", "First let's consider find_parents() and\nfind_parent(). Remember that find_all() and find() work\ntheir way down the tree, looking at tag's descendants. These methods\ndo the opposite: they work their way up the tree, looking at a tag's\n(or a string's) parents. Let's try them out, starting from a string\nburied deep in the \"three daughters\" document:", "One of the three <a> tags is the direct parent of the string in\nquestion, so our search finds it. One of the three <p> tags is an\nindirect parent (ancestor) of the string, and our search finds that as\nwell. There's a <p> tag with the CSS class \"title\" somewhere in the\ndocument, but it's not one of this string's parents, so we can't find\nit with find_parents().", "You may have noticed a similarity between find_parent() and\nfind_parents(), and the .parent and .parents attributes\nmentioned earlier. These search methods actually use the .parents\nattribute to iterate through all parents (unfiltered), checking each one\nagainst the provided filter to see if it matches.", "Method signature: find_next_siblings(name, attrs, string, limit, **kwargs)", "Method signature: find_next_sibling(name, attrs, string, **kwargs)", "These methods use .next_siblings to\niterate over the rest of an element's siblings in the tree. The\nfind_next_siblings() method returns all the siblings that match,\nand find_next_sibling() returns only the first one:", "Method signature: find_previous_siblings(name, attrs, string, limit, **kwargs)", "Method signature: find_previous_sibling(name, attrs, string, **kwargs)", "These methods use .previous_siblings to iterate over an element's\nsiblings that precede it in the tree. The find_previous_siblings()\nmethod returns all the siblings that match, and\nfind_previous_sibling() returns only the first one:", "Method signature: find_all_next(name, attrs, string, limit, **kwargs)", "Method signature: find_next(name, attrs, string, **kwargs)", "These methods use .next_elements to\niterate over whatever tags and strings that come after it in the\ndocument. The find_all_next() method returns all matches, and\nfind_next() returns only the first match:", "In the first example, the string \"Elsie\" showed up, even though it was\ncontained within the <a> tag we started from. In the second example,\nthe last <p> tag in the document showed up, even though it's not in\nthe same part of the tree as the <a> tag we started from. For these\nmethods, all that matters is that an element matches the filter and\nit shows up later in the document in document order.", "Method signature: find_all_previous(name, attrs, string, limit, **kwargs)", "Method signature: find_previous(name, attrs, string, **kwargs)", "These methods use .previous_elements to\niterate over the tags and strings that came before it in the\ndocument. The find_all_previous() method returns all matches, and\nfind_previous() only returns the first match:", "The call to find_all_previous(\"p\") found the first paragraph in\nthe document (the one with class=\"title\"), but it also finds the\nsecond paragraph, the <p> tag that contains the <a> tag we started\nwith. This shouldn't be too surprising: we're looking at all the tags\nthat show up earlier in the document in document order than the one we started with. A\n<p> tag that contains an <a> tag must have shown up before the <a>\ntag it contains.", "BeautifulSoup and Tag objects support CSS selectors through\ntheir .css property. The actual selector implementation is handled\nby the Soup Sieve\npackage, available on PyPI as soupsieve. If you installed\nBeautiful Soup through pip, Soup Sieve was installed at the same\ntime, so you don't have to do anything extra.", "The Soup Sieve documentation lists all the currently supported CSS\nselectors, but\nhere are some of the basics. You can find tags by name:", "Find tags by ID:", "Find tags contained anywhere within other tags:", "Find tags directly within other tags:", "Find all matching next siblings of tags:", "Find the next sibling tag (but only if it matches):", "Find tags by CSS class:", "Find tags that match any selector from a list of selectors:", "Test for the existence of an attribute:", "Find tags by attribute value:", "There's also a method called select_one(), which finds only the\nfirst tag that matches a selector:", "As a convenience, you can call select() and select_one() can\ndirectly on the BeautifulSoup or Tag object, omitting the\n.css property:", "CSS selector support is a convenience for people who already know the\nCSS selector syntax. You can do all of this with the Beautiful Soup\nAPI. If CSS selectors are all you need, you should skip Beautiful Soup\naltogether and parse the document with lxml: it's a lot\nfaster. But Soup Sieve lets you combine CSS selectors with the\nBeautiful Soup API.", "Soup Sieve offers a substantial API beyond the select() and\nselect_one() methods, and you can access most of that API through\nthe .css attribute of Tag or BeautifulSoup. What follows\nis just a list of the supported methods; see the Soup Sieve\ndocumentation for full\ndocumentation.", "The iselect() method works the same as select(), but it\nreturns a generator instead of a list:", "The closest() method returns the nearest parent of a given Tag\nthat matches a CSS selector, similar to Beautiful Soup's\nfind_parent() method:", "The match() method returns a Boolean depending on whether or not a\nspecific Tag matches a selector:", "The filter() method returns the subset of a tag's direct children\nthat match a selector:", "The escape() method escapes CSS identifiers that would otherwise\nbe invalid:", "If you've parsed XML that defines namespaces, you can use them in CSS\nselectors.:", "Beautiful Soup tries to use namespace prefixes that make sense based\non what it saw while parsing the document, but you can always provide\nyour own dictionary of abbreviations:", "The .css property was added in Beautiful Soup 4.12.0. Prior to this,\nonly the .select() and .select_one() convenience methods were\nsupported.", "The Soup Sieve integration was added in Beautiful Soup 4.7.0. Earlier\nversions had the .select() method, but only the most commonly-used\nCSS selectors were supported.", "Beautiful Soup's main strength is in searching the parse tree, but you\ncan also modify the tree and write your changes as a new HTML or XML\ndocument.", "I covered this earlier, in Tag.attrs, but it bears repeating. You\ncan rename a tag, change the values of its attributes, add new\nattributes, and delete attributes:", "If you set a tag's .string attribute to a new string, the tag's contents are\nreplaced with that string:", "Be careful: if the tag contained other tags, they and all their\ncontents will be destroyed.", "You can add to a tag's contents with Tag.append(). It works just\nlike calling .append() on a Python list:", "Tag.append() returns the newly appended element.", "Starting in Beautiful Soup 4.7.0, Tag also supports a method\ncalled .extend(), which adds every element of a list to a Tag,\nin order:", "Tag.extend() returns the list of appended elements.", "If you need to add a string to a document, no problem\u2014you can pass a\nPython string in to append(), or you can call the NavigableString\nconstructor:", "If you want to create a comment or some other subclass of\nNavigableString, just call the constructor:", "(This is a new feature in Beautiful Soup 4.4.0.)", "What if you need to create a whole new tag? The best solution is to\ncall the factory method BeautifulSoup.new_tag():", "Only the first argument, the tag name, is required.", "(The ``string`` argument to ``new_tag`` was introduced in Beautiful Soup 4.13.0.)", "Because insertion methods return the newly inserted element, you\ncan create, insert, and obtain an element in one step:", "Tag.insert() is just like Tag.append(), except the new element\ndoesn't necessarily go at the end of its parent's\n.contents. It will be inserted at whatever numeric position you\nsay, similar to .insert() on a Python list:", "You can pass more than one element into Tag.insert(). All the\nelements will be inserted, starting at the numeric position you\nprovide.", "Tag.insert() returns the list of newly inserted elements.", "The insert_before() method inserts tags or strings immediately\nbefore something else in the parse tree:", "The insert_after() method inserts tags or strings immediately\nafter something else in the parse tree:", "Both methods return the list of newly inserted elements.", "Tag.clear() removes the contents of a tag:", "PageElement.extract() removes a tag or string from the tree. It\nreturns the tag or string that was extracted:", "At this point you effectively have two parse trees: one rooted at the\nBeautifulSoup object you used to parse the document, and one rooted\nat the tag that was extracted. You can go on to call extract() on\na child of the element you extracted:", "Tag.decompose() removes a tag from the tree, then completely\ndestroys it and its contents:", "The behavior of a decomposed Tag or NavigableString is not\ndefined and you should not use it for anything. If you're not sure\nwhether something has been decomposed, you can check its\n.decomposed property (new in Beautiful Soup 4.9.0):", "PageElement.replace_with() extracts a tag or string from the tree,\nthen replaces it with one or more tags or strings of your choice:", "replace_with() returns the tag or string that got replaced, so\nthat you can examine it or add it back to another part of the tree.", "The ability to pass multiple arguments into replace_with() is new\nin Beautiful Soup 4.10.0.", "PageElement.wrap() wraps an element in the Tag object you specify. It\nreturns the new wrapper:", "This method is new in Beautiful Soup 4.0.5.", "Tag.unwrap() is the opposite of wrap(). It replaces a tag with\nwhatever's inside that tag. It's good for stripping out markup:", "Like replace_with(), unwrap() returns the tag\nthat was replaced.", "After calling a bunch of methods that modify the parse tree, you may end up\nwith two or more NavigableString objects next to each other.\nBeautiful Soup doesn't have any problems with this, but since it can't happen\nin a freshly parsed document, you might not expect behavior like the\nfollowing:", "You can call Tag.smooth() to clean up the parse tree by consolidating adjacent strings:", "This method is new in Beautiful Soup 4.8.0.", "The prettify() method will turn a Beautiful Soup parse tree into a\nnicely formatted Unicode string, with a separate line for each\ntag and each string:", "You can call prettify() on the top-level BeautifulSoup object,\nor on any of its Tag objects:", "Since it adds whitespace (in the form of newlines), prettify()\nchanges the meaning of an HTML document and should not be used to\nreformat one. The goal of prettify() is to help you visually\nunderstand the structure of the documents you work with.", "If you just want a string, with no fancy formatting, you can call\nstr() on a BeautifulSoup object, or on a Tag within it:", "The str() function returns a string encoded in UTF-8. See\nEncodings for other options.", "You can also call encode() to get a bytestring, and decode()\nto get Unicode.", "If you give Beautiful Soup a document that contains HTML entities like\n\"&lquot;\", they'll be converted to Unicode characters:", "If you then convert the document to a bytestring, the Unicode characters\nwill be encoded as UTF-8. You won't get the HTML entities back:", "By default, the only characters that are escaped upon output are bare\nampersands and angle brackets. These get turned into \"&amp;\", \"&lt;\",\nand \"&gt;\", so that Beautiful Soup doesn't inadvertently generate\ninvalid HTML or XML:", "You can change this behavior by providing a value for the\nformatter argument to prettify(), encode(), or\ndecode(). Beautiful Soup recognizes five possible values for\nformatter.", "The default is formatter=\"minimal\". Strings will only be processed\nenough to ensure that Beautiful Soup generates valid HTML/XML:", "If you pass in formatter=\"html\", Beautiful Soup will convert\nUnicode characters to HTML entities whenever possible:", "If you pass in formatter=\"html5\", it's similar to\nformatter=\"html\", but Beautiful Soup will\nomit the closing slash in HTML void tags like \"br\":", "In addition, any attributes whose values are the empty string\nwill become HTML-style Boolean attributes:", "(This behavior is new as of Beautiful Soup 4.10.0.)", "If you pass in formatter=None, Beautiful Soup will not modify\nstrings at all on output. This is the fastest option, but it may lead\nto Beautiful Soup generating invalid HTML/XML, as in these examples:", "If you need more sophisticated control over your output, you can\ninstantiate one of Beautiful Soup's formatter classes and pass that\nobject in as formatter.", "Used to customize the formatting rules for HTML documents.", "Here's a formatter that converts strings to uppercase, whether they\noccur in a string object or an attribute value:", "Here's a formatter that increases the indentation width when pretty-printing:", "Used to customize the formatting rules for XML documents.", "Subclassing HTMLFormatter or XMLFormatter will\ngive you even more control over the output. For example, Beautiful\nSoup sorts the attributes in every tag by default:", "To turn this off, you can subclass the Formatter.attributes()\nmethod, which controls which attributes are output and in what\norder. This implementation also filters out the attribute called \"m\"\nwhenever it appears:", "One last caveat: if you create a CData object, the text inside\nthat object is always presented exactly as it appears, with no\nformatting. Beautiful Soup will call your entity substitution\nfunction, just in case you've written a custom function that counts\nall the strings in the document or something, but it will ignore the\nreturn value:", "If you only want the human-readable text inside a document or tag, you can use the\nget_text() method. It returns all the text in a document or\nbeneath a tag, as a single Unicode string:", "You can specify a string to be used to join the bits of text\ntogether:", "You can tell Beautiful Soup to strip whitespace from the beginning and\nend of each bit of text:", "But at that point you might want to use the .stripped_strings\ngenerator instead, and process the text yourself:", "As of Beautiful Soup version 4.9.0, when lxml or html.parser are in\nuse, the contents of <script>, <style>, and <template>\ntags are generally not considered to be 'text', since those tags are not part of\nthe human-visible content of the page.", "As of Beautiful Soup version 4.10.0, you can call get_text(),\n.strings, or .stripped_strings on a NavigableString object. It will\neither return the object itself, or nothing, so the only reason to do\nthis is when you're iterating over a mixed list.", "As of Beautiful Soup version 4.13.0, you can call .string on a\nNavigableString object. It will return the object itself, so again,\nthe only reason to do this is when you're iterating over a mixed\nlist.", "If you just need to parse some HTML, you can dump the markup into the\nBeautifulSoup constructor, and it'll probably be fine. Beautiful\nSoup will pick a parser for you and parse the data. But there are a\nfew additional arguments you can pass in to the constructor to change\nwhich parser is used.", "The first argument to the BeautifulSoup constructor is a string or\nan open filehandle\u2014the source of the markup you want parsed. The second\nargument is how you'd like the markup parsed.", "If you don't specify anything, you'll get the best HTML parser that's\ninstalled. Beautiful Soup ranks lxml's parser as being the best, then\nhtml5lib's, then Python's built-in parser. You can override this by\nspecifying one of the following:", "What type of markup you want to parse. Currently supported values are\n\"html\", \"xml\", and \"html5\".", "The name of the parser library you want to use. Currently supported\noptions are \"lxml\", \"html5lib\", and \"html.parser\" (Python's\nbuilt-in HTML parser).", "The section Installing a parser contrasts the supported parsers.", "If you ask for a parser that isn't installed, Beautiful Soup will\nraise an exception so that you don't inadvertently parse a document\nunder an unknown set of rules. For example, right now, the only\nsupported XML parser is lxml. If you don't have lxml installed, asking\nfor an XML parser won't give you one, and asking for \"lxml\" won't work\neither.", "Beautiful Soup presents the same interface to a number of different\nparsers, but each parser is different. Different parsers will create\ndifferent parse trees from the same document. The biggest differences\nare between the HTML parsers and the XML parsers. Here's a short\ndocument, parsed as HTML using the parser that comes with Python:", "Since a standalone <b/> tag is not valid HTML, html.parser turns it into\na <b></b> tag pair.", "Here's the same document parsed as XML (running this requires that you\nhave lxml installed). Note that the standalone <b/> tag is left alone, and\nthat the document is given an XML declaration instead of being put\ninto an <html> tag.:", "There are also differences between HTML parsers. If you give Beautiful\nSoup a perfectly-formed HTML document, these differences won't\nmatter. One parser will be faster than another, but they'll all give\nyou a data structure that looks exactly like the original HTML\ndocument.", "But if the document is not perfectly-formed, different parsers will\ngive different results. Here's a short, invalid document parsed using\nlxml's HTML parser. Note that the <a> tag gets wrapped in <body> and\n<html> tags, and the dangling </p> tag is simply ignored:", "Here's the same document parsed using html5lib:", "Instead of ignoring the dangling </p> tag, html5lib pairs it with an\nopening <p> tag. html5lib also adds an empty <head> tag; lxml didn't\nbother.", "Here's the same document parsed with Python's built-in HTML\nparser:", "Like lxml, this parser ignores the closing </p> tag. Unlike\nhtml5lib or lxml, this parser makes no attempt to create a\nwell-formed HTML document by adding <html> or <body> tags.", "Since the document \"<a></p>\" is invalid, none of these techniques is\nthe 'correct' way to handle it. The html5lib parser uses techniques\nthat are part of the HTML5 standard, so it has the best claim on being\nthe 'correct' way, but all three techniques are legitimate.", "Differences between parsers can affect your script. If you're planning\non distributing your script to other people, or running it on multiple\nmachines, you should specify a parser in the BeautifulSoup\nconstructor. That will reduce the chances that your users parse a\ndocument differently from the way you parse it.", "Any HTML or XML document is written in a specific encoding like ASCII\nor UTF-8. But when you load that document into Beautiful Soup, you'll\ndiscover it's been converted to Unicode:", "It's not magic. (That sure would be nice.) Beautiful Soup uses a\nsub-library called Unicode, Dammit to detect a document's encoding\nand convert it to Unicode. The autodetected encoding is available as\nthe .original_encoding attribute of the BeautifulSoup object:", "If .original_encoding is None, that means the document was\nalready Unicode when it was passed into Beautiful Soup:", "Unicode, Dammit guesses correctly most of the time, but sometimes it\nmakes mistakes. Sometimes it guesses correctly, but only after a\nbyte-by-byte search of the document that takes a very long time. If\nyou happen to know a document's encoding ahead of time, you can avoid\nmistakes and delays by passing it to the BeautifulSoup constructor\nas from_encoding.", "Here's a document written in ISO-8859-8. The document is so short that\nUnicode, Dammit can't get a lock on it, and misidentifies it as\nISO-8859-7:", "We can fix this by passing in the correct from_encoding:", "If you don't know what the correct encoding is, but you know that\nUnicode, Dammit is guessing wrong, you can pass the wrong guesses in\nas exclude_encodings:", "Windows-1255 isn't 100% correct, but that encoding is a compatible\nsuperset of ISO-8859-8, so it's close enough. (exclude_encodings\nis a new feature in Beautiful Soup 4.4.0.)", "In rare cases (usually when a UTF-8 document contains text written in\na completely different encoding), the only way to get Unicode may be\nto replace some characters with the special Unicode character\n\"REPLACEMENT CHARACTER\" (U+FFFD, \ufffd). If Unicode, Dammit needs to do\nthis, it will set the .contains_replacement_characters attribute\nto True on the UnicodeDammit or BeautifulSoup object. This\nlets you know that the Unicode representation is not an exact\nrepresentation of the original\u2014some data was lost. If a document\ncontains \ufffd, but .contains_replacement_characters is False,\nyou'll know that the \ufffd was there originally (as it is in this\nparagraph) and doesn't stand in for missing data.", "When you write out an output document from Beautiful Soup, you get a UTF-8\ndocument, even if the input document wasn't in UTF-8 to begin with. Here's a\ndocument written in the Latin-1 encoding:", "Note that the <meta> tag has been rewritten to reflect the fact that\nthe document is now in UTF-8.", "If you don't want UTF-8, you can pass an encoding into prettify():", "You can also call encode() on the BeautifulSoup object, or any\nelement in the soup, just as if it were a Python string:", "Any characters that can't be represented in your chosen encoding will\nbe converted into numeric XML entity references. Here's a document\nthat includes the Unicode character SNOWMAN:", "The SNOWMAN character can be part of a UTF-8 document (it looks like\n\u2603), but there's no representation for that character in ISO-Latin-1 or\nASCII, so it's converted into \"&#9731\" for those encodings:", "You can use Unicode, Dammit without using Beautiful Soup. It's useful\nwhenever you have data in an unknown encoding and you just want it to\nbecome Unicode:", "Unicode, Dammit's guesses will get a lot more accurate if you install\none of these Python libraries: charset-normalizer, chardet, or\ncchardet. The more data you give Unicode, Dammit, the more\naccurately it will guess. If you have your own suspicions as to what\nthe encoding might be, you can pass them in as a list:", "Unicode, Dammit has two special features that Beautiful Soup doesn't\nuse.", "You can use Unicode, Dammit to convert Microsoft smart quotes to HTML or XML\nentities:", "You can also convert Microsoft smart quotes to ASCII quotes:", "Hopefully you'll find this feature useful, but Beautiful Soup doesn't\nuse it. Beautiful Soup prefers the default behavior, which is to\nconvert Microsoft smart quotes to Unicode characters along with\neverything else:", "Sometimes a document is mostly in UTF-8, but contains Windows-1252\ncharacters such as (again) Microsoft smart quotes. This can happen\nwhen a website includes data from multiple sources. You can use\nUnicodeDammit.detwingle() to turn such a document into pure\nUTF-8. Here's a simple example:", "This document is a mess. The snowmen are in UTF-8 and the quotes are\nin Windows-1252. You can display the snowmen or the quotes, but not\nboth:", "Decoding the document as UTF-8 raises a UnicodeDecodeError, and\ndecoding it as Windows-1252 gives you gibberish. Fortunately,\nUnicodeDammit.detwingle() will convert the string to pure UTF-8,\nallowing you to decode it to Unicode and display the snowmen and quote\nmarks simultaneously:", "UnicodeDammit.detwingle() only knows how to handle Windows-1252\nembedded in UTF-8 (or vice versa, I suppose), but this is the most\ncommon case.", "Note that you must know to call UnicodeDammit.detwingle() on your\ndata before passing it into BeautifulSoup or the UnicodeDammit\nconstructor. Beautiful Soup assumes that a document has a single\nencoding, whatever it might be. If you pass it a document that\ncontains both UTF-8 and Windows-1252, it's likely to think the whole\ndocument is Windows-1252, and the document will come out looking like\n\u00e2\u02dc\u0192\u00e2\u02dc\u0192\u00e2\u02dc\u0192\u201cI like snowmen!\u201d.", "UnicodeDammit.detwingle() is new in Beautiful Soup 4.1.0.", "The html.parser and html5lib parsers can keep track of where in\nthe original document each Tag was found. You can access this\ninformation as Tag.sourceline (line number) and Tag.sourcepos\n(position of the start tag within a line):", "Note that the two parsers mean slightly different things by\nsourceline and sourcepos. For html.parser, these numbers\nrepresent the position of the initial less-than sign. For html5lib,\nthese numbers represent the position of the final greater-than sign:", "You can shut off this feature by passing store_line_numbers=False\ninto the BeautifulSoup constructor:", "This feature is new in 4.8.1, and the parsers based on lxml don't\nsupport it.", "Beautiful Soup says that two NavigableString or Tag objects\nare equal when they represent the same HTML or XML markup, even if their\nattributes are in a different order or they live in different parts of the\nobject tree. In this example, the two <b> tags are treated as equal, because\nthey both look like \"<b>pizza</b>\":", "If you want to see whether two variables refer to exactly the same\nobject, use is:", "You can use copy.copy() to create a copy of any Tag or\nNavigableString:", "The copy is considered equal to the original, since it represents the\nsame markup as the original, but it's not the same object:", "The only real difference is that the copy is completely detached from\nthe original Beautiful Soup object tree, just as if extract() had\nbeen called on it. This is because two different Tag\nobjects can't occupy the same space at the same time.", "You can use Tag.copy_self() to create a copy of a\nTag without copying its contents.", "(Tag.copy_self() is introduced in Beautiful Soup 4.13.0.)", "Almost everyone who uses Beautiful Soup to extract information from a\ndocument can get what they need using the methods described in\nSearching the tree. However, there's a lower-level interface that\nlets you define any matching behavior you want. Behind the scenes, the\nparts of the Beautiful Soup API that most people use--find_all()\nand the like\u2014are actually using this low-level interface, and you\ncan use it directly.", "(Access to the low-level search interface is a new feature in\nBeautiful Soup 4.13.0.)", "The ElementFilter class is your entry point to the\nlow-level interface. To use it, define a function that takes a\nPageElement object (which could be either a\nTag or a NavigableString). The function must\nreturn True if the element matches your custom criteria, and\nFalse if it doesn't.", "This example function looks for content-containing tags and strings,\nbut skips whitespace-only strings:", "Once you have a function, pass it into the ElementFilter constructor:", "You can then use this ElementFilter object as the first\nargument to any of the Searching the tree methods. Whatever\ncriteria you defined in your function will be used instead of the\ndefault Beautiful Soup match logic:", "Every potential match will be run through your function, and the only\nPageElement objects returned will be the ones where your\nfunction returned True.", "To summarize the function-based matching behaviors,", "A function passed as the first argument to a search method\n(or equivalently, using the name argument) considers only\nTag objects.", "A function passed to a search method using the string argument\nconsiders only NavigableString objects.", "A function passed to a search method using an ElementFilter\nobject considers both Tag and NavigableString\nobjects.", "By passing an ElementFilter instance into Beautiful Soup's\ntree-searching methods, you can completely customize what it means for\nBeautiful Soup to match an element as it iterates over the parse\ntree. By using the ElementFilter.filter() method, you can\nalso completely customize what it means for Beautiful Soup to iterate\nover the parse tree in the first place.", "The ElementFilter.filter() method takes a generator that yields\na stream of PageElement objects. There is no restriction\non which PageElement objects show up, how many times they\nshow up, or in which order. Theoretically, they don't even need to be\nfrom the same BeautifulSoup document. You can do whatever\nmakes sense for you.", "Here's a silly example: a generator that walks randomly back and forth\nthrough the parse tree:", "Pass this generator into the example ElementFilter.filter()\nand Beautiful Soup will wander randomly around the parse tree,\napplying the non_whitespace_filter function to every element it finds,\nand yielding all of the matches\u2014potentially yielding a given object\nmore than once:", "(Note that unlike the other code examples in this documentation, this\nexample can give different results every time you run it, thanks\nto the random element. It's very unlikely, but this function could\nwander around the parse tree forever and never complete.)", "Beautiful Soup offers a number of ways to customize how the parser\ntreats incoming HTML and XML. This section covers the most commonly\nused customization techniques.", "Let's say you want to use Beautiful Soup to look at a document's <a>\ntags. It's a waste of time and memory to parse the entire document and\nthen go over it again looking for <a> tags. It would be much faster to\nignore everything that wasn't an <a> tag in the first place. The\nSoupStrainer class allows you to choose which parts of an incoming\ndocument are parsed. You just create a SoupStrainer and pass it in\nto the BeautifulSoup constructor as the parse_only argument.", "(Note that this feature won't work if you're using the html5lib parser.\nIf you use html5lib, the whole document will be parsed, no\nmatter what. This is because html5lib constantly rearranges the parse\ntree as it works, and if some part of the document didn't actually\nmake it into the parse tree, it'll crash. To avoid confusion, in the\nexamples below I'll be forcing Beautiful Soup to use Python's\nbuilt-in parser.)", "The SoupStrainer class takes the same arguments as a typical\nmethod from Searching the tree: name, attrs, string, and **kwargs. Here are\nthree SoupStrainer objects:", "I'm going to bring back the \"three sisters\" document one more time,\nand we'll see what the document looks like when it's parsed with these\nthree SoupStrainer objects:", "The SoupStrainer behavior is as follows:", "When a tag matches, it is kept (including all its contents, whether they also\nmatch or not).", "When a tag does not match, the tag itself is not kept, but parsing continues\ninto its contents to look for other tags that do match.", "In an HTML document, an attribute like class is given a list of\nvalues, and an attribute like id is given a single value, because\nthe HTML specification treats those attributes differently:", "You can turn this off by passing in\nmulti_valued_attributes=None. Than all attributes will be given a\nsingle value:", "You can customize this behavior quite a bit by passing in a\ndictionary for multi_valued_attributes. If you need this, look at\nHTMLTreeBuilder.DEFAULT_CDATA_LIST_ATTRIBUTES to see the\nconfiguration Beautiful Soup uses by default, which is based on the\nHTML specification.", "(This is a new feature in Beautiful Soup 4.8.0.)", "When using the html.parser parser, you can use the\non_duplicate_attribute constructor argument to customize what\nBeautiful Soup does when it encounters a tag that defines the same\nattribute more than once:", "The default behavior is to use the last value found for the tag:", "With on_duplicate_attribute='ignore' you can tell Beautiful Soup\nto use the first value found and ignore the rest:", "(lxml and html5lib always do it this way; their behavior can't be\nconfigured from within Beautiful Soup.)", "If you need more control, you can pass in a function that's called on each\nduplicate value:", "(This is a new feature in Beautiful Soup 4.9.1.)", "When a parser tells Beautiful Soup about a tag or a string, Beautiful\nSoup will instantiate a Tag or NavigableString object to\ncontain that information. Instead of that default behavior, you can\ntell Beautiful Soup to instantiate subclasses of Tag or\nNavigableString, subclasses you define with custom behavior:", "This can be useful when incorporating Beautiful Soup into a test\nframework.", "(This is a new feature in Beautiful Soup 4.8.1.)", "If you're having trouble understanding what Beautiful Soup does to a\ndocument, pass the document into the diagnose() function. (This function is new in\nBeautiful Soup 4.2.0.) Beautiful Soup will print out a report showing\nyou how different parsers handle the document, and tell you if you're\nmissing a parser that Beautiful Soup could be using:", "Just looking at the output of diagnose() might show you how to solve the\nproblem. Even if not, you can paste the output of diagnose() when\nasking for help.", "There are two different kinds of parse errors. There are crashes,\nwhere you feed a document to Beautiful Soup and it raises an\nexception (usually an HTMLParser.HTMLParseError). And there is\nunexpected behavior, where a Beautiful Soup parse tree looks a lot\ndifferent than the document used to create it.", "These problems are almost never problems with Beautiful Soup itself.\nThis is not because Beautiful Soup is an amazingly well-written piece\nof software. It's because Beautiful Soup doesn't include any parsing\ncode. Instead, it relies on external parsers. If one parser isn't\nworking on a certain document, the best solution is to try a different\nparser. See Installing a parser for details and a parser\ncomparison. If this doesn't help, you might need to inspect the\ndocument tree found inside the BeautifulSoup object, to see where\nthe markup you're looking for actually ended up.", "SyntaxError: Invalid syntax (on the line ROOT_TAG_NAME =\n'[document]'): Caused by running an old Python 2 version of\nBeautiful Soup under Python 3, without converting the code.", "ImportError: No module named HTMLParser - Caused by running an old\nPython 2 version of Beautiful Soup under Python 3.", "ImportError: No module named html.parser - Caused by running the\nPython 3 version of Beautiful Soup under Python 2.", "ImportError: No module named BeautifulSoup - Caused by running\nBeautiful Soup 3 code in an environment that doesn't have BS3\ninstalled. Or, by writing Beautiful Soup 4 code without knowing that\nthe package name has changed to bs4.", "ImportError: No module named bs4 - Caused by running Beautiful\nSoup 4 code in an environment that doesn't have BS4 installed.", "By default, Beautiful Soup parses documents as HTML. To parse a\ndocument as XML, pass in \"xml\" as the second argument to the\nBeautifulSoup constructor:", "You'll need to have lxml installed.", "If your script works on one computer but not another, or in one\nvirtual environment but not another, or outside the virtual\nenvironment but not inside, it's probably because the two\nenvironments have different parser libraries available. For example,\nyou may have developed the script on a computer that has lxml\ninstalled, and then tried to run it on a computer that only has\nhtml5lib installed. See Differences between parsers for why this\nmatters, and fix the problem by mentioning a specific parser library\nin the BeautifulSoup constructor.", "Because HTML tags and attributes are case-insensitive, all three HTML\nparsers convert tag and attribute names to lowercase. That is, the\nmarkup <TAG></TAG> is converted to <tag></tag>. If you want to\npreserve mixed-case or uppercase tags and attributes, you'll need to\nparse the document as XML.", "UnicodeEncodeError: 'charmap' codec can't encode character\n'\\xfoo' in position bar (or just about any other\nUnicodeEncodeError) - This problem shows up in two main\nsituations. First, when you try to print a Unicode character that\nyour console doesn't know how to display. (See this page on the\nPython wiki for help.)\nSecond, when you're writing to a file and you pass in a Unicode\ncharacter that's not supported by your default encoding. In this\ncase, the simplest solution is to explicitly encode the Unicode\nstring into UTF-8 with u.encode(\"utf8\").", "KeyError: [attr] - Caused by accessing tag['attr'] when the\ntag in question doesn't define the attr attribute. The most\ncommon errors are KeyError: 'href' and KeyError: 'class'.\nUse tag.get('attr') if you're not sure attr is\ndefined, just as you would with a Python dictionary.", "AttributeError: 'ResultSet' object has no attribute 'foo' - This\nusually happens because you expected find_all() to return a\nsingle tag or string. But find_all() returns a list of tags\nand strings\u2014a ResultSet object. You need to iterate over the\nlist and look at the .foo of each one. Or, if you really only\nwant one result, you need to use find() instead of\nfind_all().", "AttributeError: 'NoneType' object has no attribute 'foo' - This\nusually happens because you called find() and then tried to\naccess the .foo attribute of the result. But in your case,\nfind() didn't find anything, so it returned None, instead of\nreturning a tag or a string. You need to figure out why your\nfind() call isn't returning anything.", "AttributeError: 'NavigableString' object has no attribute\n'foo' - This usually happens because you're treating a string as\nthough it were a tag. You may be iterating over a list, expecting\nthat it contains nothing but tags, when it actually contains both tags and\nstrings.", "Beautiful Soup will never be as fast as the parsers it sits on top\nof. If response time is critical, if you're paying for computer time\nby the hour, or if there's any other reason why computer time is more\nvaluable than programmer time, you should forget about Beautiful Soup\nand work directly atop lxml.", "That said, there are things you can do to speed up Beautiful Soup. If\nyou're not using lxml as the underlying parser, my advice is to\nstart. Beautiful Soup parses documents\nsignificantly faster using lxml than using html.parser or html5lib.", "You can speed up encoding detection significantly by installing the\ncchardet library.", "Parsing only part of a document won't save you much time parsing\nthe document, but it can save a lot of memory, and it'll make\nsearching the document much faster.", "New translations of the Beautiful Soup documentation are greatly\nappreciated. Translations should be licensed under the MIT license,\njust like Beautiful Soup and its English documentation are.", "There are two ways of getting your translation into the main code base\nand onto the Beautiful Soup website:", "Create a branch of the Beautiful Soup repository, add your\ntranslation, and propose a merge with the main branch, the same\nas you would do with a proposed change to the source code.", "Send a message to the Beautiful Soup discussion group with a link to\nyour translation, or attach your translation to the message.", "Use the Chinese or Brazilian Portuguese translations as your model. In\nparticular, please translate the source file doc/index.rst,\nrather than the HTML version of the documentation. This makes it\npossible to publish the documentation in a variety of formats, not\njust HTML.", "Beautiful Soup 3 is the previous release series, and is no longer\nsupported. Development of Beautiful Soup 3 stopped in 2012, and the\npackage was completely discontinued in 2021. There's no reason to\ninstall it unless you're trying to get very old software to work, but\nit's published through PyPi as BeautifulSoup:", "$ pip install BeautifulSoup", "You can also download a tarball of the final release, 3.2.2.", "If you ran pip install beautifulsoup or pip install\nBeautifulSoup, but your code doesn't work, you installed Beautiful\nSoup 3 by mistake. You need to run pip install beautifulsoup4.", "The documentation for Beautiful Soup 3 is archived online.", "Most code written against Beautiful Soup 3 will work against Beautiful\nSoup 4 with one simple change. All you should have to do is change the\npackage name from BeautifulSoup to bs4. So this:", "becomes this:", "If you get the ImportError \"No module named BeautifulSoup\", your\nproblem is that you're trying to run Beautiful Soup 3 code, but you\nonly have Beautiful Soup 4 installed.", "If you get the ImportError \"No module named bs4\", your problem\nis that you're trying to run Beautiful Soup 4 code, but you only\nhave Beautiful Soup 3 installed.", "Although BS4 is mostly backward-compatible with BS3, most of its\nmethods have been deprecated and given new names for PEP 8 compliance. There are numerous other\nrenames and changes, and a few of them break backward compatibility.", "Here's what you'll need to know to convert your BS3 code and habits to BS4:", "Beautiful Soup 3 used Python's SGMLParser, a module that was\ndeprecated and removed in Python 3.0. Beautiful Soup 4 uses\nhtml.parser by default, but you can plug in lxml or html5lib and\nuse that instead. See Installing a parser for a comparison.", "Since html.parser is not the same parser as SGMLParser, you\nmay find that Beautiful Soup 4 gives you a different parse tree than\nBeautiful Soup 3 for the same markup. If you swap out html.parser\nfor lxml or html5lib, you may find that the parse tree changes yet\nagain. If this happens, you'll need to update your scraping code to\nprocess the new tree.", "I renamed three attributes to avoid using words that have special\nmeaning to Python. Unlike my changes to method names (which you'll see\nin the form of deprecation warnings), these changes did not\npreserve backwards compatibility. If you used these attributes in\nBS3, your code will break in BS4 until you change them.", "UnicodeDammit.unicode -> UnicodeDammit.unicode_markup", "Tag.next -> Tag.next_element", "Tag.previous -> Tag.previous_element", "Some of the generators used to yield None after they were done, and\nthen stop. That was a bug. Now the generators just stop.", "There is no longer a BeautifulStoneSoup class for parsing XML. To\nparse XML you pass in \"xml\" as the second argument to the\nBeautifulSoup constructor. For the same reason, the\nBeautifulSoup constructor no longer recognizes the isHTML\nargument.", "Beautiful Soup's handling of empty-element XML tags has been\nimproved. Previously when you parsed XML you had to explicitly say\nwhich tags were considered empty-element tags. The selfClosingTags\nargument to the constructor is no longer recognized. Instead,\nBeautiful Soup considers any empty tag to be an empty-element tag. If\nyou add a child to an empty-element tag, it stops being an\nempty-element tag.", "An incoming HTML or XML entity is always converted into the\ncorresponding Unicode character. Beautiful Soup 3 had a number of\noverlapping ways of dealing with entities, which have been\nremoved. The BeautifulSoup constructor no longer recognizes the\nsmartQuotesTo or convertEntities arguments. (Unicode,\nDammit still has smart_quotes_to, but its default is now to turn\nsmart quotes into Unicode.) The constants HTML_ENTITIES,\nXML_ENTITIES, and XHTML_ENTITIES have been removed, since they\nconfigure a feature (transforming some but not all entities into\nUnicode characters) that no longer exists.", "If you want to turn Unicode characters back into HTML entities on\noutput, rather than turning them into UTF-8 characters, you need to\nuse an output formatter.", "Tag.string now operates recursively. If tag A\ncontains a single tag B and nothing else, then A.string is the same as\nB.string. (Previously, it was None.)", "Multi-valued attributes like class have lists of strings as\ntheir values, not simple strings. This may affect the way you search by CSS\nclass.", "Tag objects now implement the __hash__ method, such that two\nTag objects are considered equal if they generate the same\nmarkup. This may change your script's behavior if you put Tag\nobjects into a dictionary or set.", "If you pass one of the find* methods both string and\na tag-specific argument like name, Beautiful Soup will\nsearch for tags that match your tag-specific criteria and whose\nTag.string matches your string\nvalue. It will not find the strings themselves. Previously,\nBeautiful Soup ignored the tag-specific arguments and looked for\nstrings.", "The BeautifulSoup constructor no longer recognizes the\nmarkupMassage argument. It's now the parser's responsibility to\nhandle markup correctly.", "The rarely-used alternate parser classes like\nICantBelieveItsBeautifulSoup and BeautifulSOAP have been\nremoved. It's now the parser's decision how to handle ambiguous\nmarkup.", "The prettify() method now returns a Unicode string, not a bytestring."]}