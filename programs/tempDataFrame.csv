,website_title,all_urls,all_paragraphs
0,Beautiful Soup Documentation — Beautiful Soup 4.13.0 documentation,http://www.crummy.com/software/BeautifulSoup/,"Beautiful Soup is a
Python library for pulling data out of HTML and XML files. It works
with your favorite parser to provide idiomatic ways of navigating,
searching, and modifying the parse tree. It commonly saves programmers
hours or days of work."
1,,http://www.crummy.com/software/BeautifulSoup/bs3/documentation.html,"These instructions illustrate all major features of Beautiful Soup 4,
with examples. I show you what the library is good for, how it works,
how to use it, how to make it do what you want, and what to do when it
violates your expectations."
2,,https://www.crummy.com/software/BeautifulSoup/bs4/doc.zh/,"This document covers Beautiful Soup version 4.13.3. The examples in
this documentation were written for Python 3.8."
3,,http://kondou.com/BS4/,"You might be looking for the documentation for Beautiful Soup 3.
If so, you should know that Beautiful Soup 3 is no longer being
developed and that all support for it was dropped on December
31, 2020. If you want to learn about the differences between Beautiful
Soup 3 and Beautiful Soup 4, see Porting code to BS4."
4,,https://www.crummy.com/software/BeautifulSoup/bs4/doc.ko/,"This documentation has been translated into other languages by
Beautiful Soup users:"
5,,https://www.crummy.com/software/BeautifulSoup/bs4/doc.ptbr,这篇文档当然还有中文版.
6,,https://www.crummy.com/software/BeautifulSoup/bs4/doc.es/,このページは日本語で利用できます(外部リンク)
7,,https://www.crummy.com/software/BeautifulSoup/bs4/doc.ru/,이 문서는 한국어 번역도 가능합니다.
8,,https://groups.google.com/forum/?fromgroups#!forum/beautifulsoup,Este documento também está disponível em Português do Brasil.
9,,http://www.crummy.com/software/BeautifulSoup/bs3/documentation.html,Este documento también está disponible en una traducción al español.
10,,http://www.crummy.com/software/BeautifulSoup/download/4.x/,Эта документация доступна на русском языке.
11,,http://lxml.de/,"If you have questions about Beautiful Soup, or run into problems,
send mail to the discussion group. If
your problem involves parsing an HTML document, be sure to mention
what the diagnose() function says about
that document."
12,,http://code.google.com/p/html5lib/,"When reporting an error in this documentation, please mention which
translation you're reading."
13,,https://www.w3.org/TR/REC-xml/#sec-prolog-dtd,"This document is written like an instruction manual, but you can also read
traditional API documentation
generated from the Beautiful Soup source code. If you want details
about Beautiful Soup's internals, or a feature not covered in this
document, try the API documentation."
14,,https://www.w3.org/TR/REC-xml/#dt-doctype,"Here's an HTML document I'll be using as an example throughout this
document. It's part of a story from Alice in Wonderland:"
15,,https://www.w3.org/TR/REC-xml/#sec-cdata-sect,"Running the ""three sisters"" document through Beautiful Soup gives us a
BeautifulSoup object, which represents the document as a nested
data structure:"
16,,https://www.w3.org/TR/REC-xml/#sec-pi,Here are some simple ways to navigate that data structure:
17,,https://facelessuser.github.io/soupsieve/,One common task is extracting all the URLs found within a page's <a> tags:
18,,https://facelessuser.github.io/soupsieve/selectors/,Another common task is extracting all the text from a page:
19,,https://facelessuser.github.io/soupsieve/,"Does this look like what you need? If so, read on."
20,,http://www.w3.org/TR/html5/syntax.html#syntax,"If you're using a recent version of Debian or Ubuntu Linux, you can
install Beautiful Soup with the system package manager:"
21,,http://wiki.python.org/moin/PrintFails,$ apt-get install python3-bs4
22,,http://lxml.de/,"Beautiful Soup 4 is published through PyPi, so if you can't install it
with the system packager, you can install it with easy_install or
pip. The package name is beautifulsoup4. Make sure you use the
right version of pip or easy_install for your Python version
(these may be named pip3 and easy_install3 respectively)."
23,,http://pypi.python.org/pypi/cchardet/,$ easy_install beautifulsoup4
24,,https://www.crummy.com/software/BeautifulSoup/download/3.x/BeautifulSoup-3.2.2.tar.gz,$ pip install beautifulsoup4
25,,http://www.crummy.com/software/BeautifulSoup/bs3/documentation.html,"(The BeautifulSoup package is not what you want. That's
the previous major release, Beautiful Soup 3. Lots of software uses
BS3, so it's still available, but if you're writing new code you
should install beautifulsoup4.)"
26,,http://www.python.org/dev/peps/pep-0008/,"If you don't have easy_install or pip installed, you can
download the Beautiful Soup 4 source tarball and
install it with setup.py."
27,,https://www.sphinx-doc.org/,$ python setup.py install
28,,https://alabaster.readthedocs.io,"If all else fails, the license for Beautiful Soup allows you to
package the entire library with your application. You can download the
tarball, copy its bs4 directory into your application's codebase,
and use Beautiful Soup without installing it at all."
29,,,"I use Python 3.10 to develop Beautiful Soup, but it should work with
other recent versions."
30,,,"Beautiful Soup supports the HTML parser included in Python's standard
library, but it also supports a number of third-party Python parsers.
One is the lxml parser. Depending on your setup,
you might install lxml with one of these commands:"
31,,,$ apt-get install python-lxml
32,,,$ easy_install lxml
33,,,$ pip install lxml
34,,,"Another alternative is the pure-Python html5lib parser, which parses HTML the way a
web browser does. Depending on your setup, you might install html5lib
with one of these commands:"
35,,,$ apt-get install python3-html5lib
36,,,$ pip install html5lib
37,,,This table summarizes the advantages and disadvantages of each parser library:
38,,,Parser
39,,,Typical usage
40,,,Advantages
41,,,Disadvantages
42,,,Python's html.parser
43,,,"BeautifulSoup(markup, ""html.parser"")"
44,,,Batteries included
45,,,Decent speed
46,,,"Not as fast as lxml,
less lenient than
html5lib."
47,,,lxml's HTML parser
48,,,"BeautifulSoup(markup, ""lxml"")"
49,,,Very fast
50,,,External C dependency
51,,,lxml's XML parser
52,,,"BeautifulSoup(markup, ""lxml-xml"")
BeautifulSoup(markup, ""xml"")"
53,,,Very fast
54,,,"The only currently supported
XML parser"
55,,,External C dependency
56,,,html5lib
57,,,"BeautifulSoup(markup, ""html5lib"")"
58,,,Extremely lenient
59,,,"Parses pages the same way a
web browser does"
60,,,Creates valid HTML5
61,,,Very slow
62,,,"External Python
dependency"
63,,,"If you can, I recommend you install and use lxml for speed."
64,,,"Note that if a document is invalid, different parsers will generate
different Beautiful Soup trees for it. See Differences
between parsers for details."
65,,,"To parse a document, pass it into the BeautifulSoup
constructor. You can pass in a string or an open filehandle:"
66,,,"First, the document is converted to Unicode, and HTML entities are
converted to Unicode characters:"
67,,,"Beautiful Soup then parses the document using the best available
parser. It will use an HTML parser unless you specifically tell it to
use an XML parser. (See Parsing XML.)"
68,,,"Beautiful Soup transforms a complex HTML document into a complex tree
of Python objects. But you'll only ever have to deal with about four
kinds of objects: Tag, NavigableString, BeautifulSoup,
and Comment. These objects represent the HTML elements
that comprise the page."
69,,,A Tag object corresponds to an XML or HTML tag in the original document.
70,,,"Tags have a lot of attributes and methods, and I'll cover most of them
in Navigating the tree and Searching the tree. For now, the most
important methods of a tag are for accessing its name and attributes."
71,,,Every tag has a name:
72,,,"If you change a tag's name, the change will be reflected in any
markup generated by Beautiful Soup down the line:"
73,,,"An HTML or XML tag may have any number of attributes. The tag <b
id=""boldest""> has an attribute ""id"" whose value is
""boldest"". You can access a tag's attributes by treating the tag like
a dictionary:"
74,,,You can access the dictionary of attributes directly as .attrs:
75,,,"You can add, remove, and modify a tag's attributes. Again, this is
done by treating the tag as a dictionary:"
76,,,"HTML 4 defines a few attributes that can have multiple values. HTML 5
removes a couple of them, but defines a few more. The most common
multi-valued attribute is class (that is, a tag can have more than
one CSS class). Others include rel, rev, accept-charset,
headers, and accesskey. By default, Beautiful Soup stores the value(s)
of a multi-valued attribute as a list:"
77,,,"When you turn a tag back into a string, the values of any multi-valued
attributes are consolidated:"
78,,,"If an attribute looks like it has more than one value, but it's not
a multi-valued attribute as defined by any version of the HTML
standard, Beautiful Soup stores it as a simple string:"
79,,,"You can force all attributes to be stored as strings by passing
multi_valued_attributes=None as a keyword argument into the
BeautifulSoup constructor:"
80,,,"You can use get_attribute_list to always return the value in a list
container, whether it's a string or multi-valued attribute value:"
81,,,"If you parse a document as XML, there are no multi-valued attributes:"
82,,,"Again, you can configure this using the multi_valued_attributes argument:"
83,,,"You probably won't need to do this, but if you do, use the defaults as
a guide. They implement the rules described in the HTML specification:"
84,,,"A tag can contain strings as pieces of text. Beautiful Soup
uses the NavigableString class to contain these pieces of text:"
85,,,"A NavigableString is just like a Python Unicode string, except
that it also supports some of the features described in Navigating
the tree and Searching the tree. You can convert a
NavigableString to a Unicode string with str:"
86,,,"You can't edit a string in place, but you can replace one string with
another, using replace_with():"
87,,,"NavigableString supports most of the features described in
Navigating the tree and Searching the tree, but not all of
them. In particular, since a string can't contain anything (the way a
tag may contain a string or another tag), strings don't support the
.contents or .string attributes, or the find() method."
88,,,"If you want to use a NavigableString outside of Beautiful Soup,
you should call unicode() on it to turn it into a normal Python
Unicode string. If you don't, your string will carry around a
reference to the entire Beautiful Soup parse tree, even when you're
done using Beautiful Soup. This is a big waste of memory."
89,,,"The BeautifulSoup object represents the parsed document as a
whole. For most purposes, you can treat it as a Tag
object. This means it supports most of the methods described in
Navigating the tree and Searching the tree."
90,,,"You can also pass a BeautifulSoup object into one of the methods
defined in Modifying the tree, just as you would a Tag. This
lets you do things like combine two parsed documents:"
91,,,"Since the BeautifulSoup object doesn't correspond to an actual
HTML or XML tag, it has no name and no attributes. But sometimes it's
useful to reference its .name (such as when writing code that works
with both Tag and BeautifulSoup objects),
so it's been given the special .name ""[document]"":"
92,,,"Tag, NavigableString, and
BeautifulSoup cover almost everything you'll see in an
HTML or XML file, but there are a few leftover bits. The main one
you'll probably encounter is the Comment."
93,,,The Comment object is just a special type of NavigableString:
94,,,"But when it appears as part of an HTML document, a Comment is
displayed with special formatting:"
95,,,"Beautiful Soup defines a few NavigableString subclasses to
contain strings found inside specific HTML tags. This makes it easier
to pick out the main body of the page, by ignoring strings that
probably represent programming directives found within the
page. (These classes are new in Beautiful Soup 4.9.0, and the
html5lib parser doesn't use them.)"
96,,,"A NavigableString subclass that represents embedded CSS
stylesheets; that is, any strings found inside a <style> tag
during document parsing."
97,,,"A NavigableString subclass that represents embedded
Javascript; that is, any strings found inside a <script> tag
during document parsing."
98,,,"A NavigableString subclass that represents embedded HTML
templates; that is, any strings found inside a <template> tag during
document parsing."
99,,,"Beautiful Soup defines some NavigableString classes for
holding special types of strings that can be found in XML
documents. Like Comment, these classes are subclasses of
NavigableString that add something extra to the string on
output."
100,,,"A NavigableString subclass representing the declaration at the beginning of
an XML document."
101,,,"A NavigableString subclass representing the document type
declaration which may
be found near the beginning of an XML document."
102,,,A NavigableString subclass that represents a CData section.
103,,,"A NavigableString subclass that represents the contents
of an XML processing instruction."
104,,,"Here's the ""Three sisters"" HTML document again:"
105,,,"I'll use this as an example to show you how to move from one part of
a document to another."
106,,,"Tags may contain strings and more tags. These elements are the tag's
children. Beautiful Soup provides a lot of different attributes for
navigating and iterating over a tag's children."
107,,,"Note that Beautiful Soup strings don't support any of these
attributes, because a string can't have children."
108,,,"The simplest way to navigate the parse tree is to find a tag by name. To
do this, you can use the find() method:"
109,,,"For convenience, just saying the name of the tag you want is equivalent
to find() (if no built-in attribute has that name). If you want the
<head> tag, just say soup.head:"
110,,,"You can use this trick again and again to zoom in on a certain part
of the parse tree. This code gets the first <b> tag beneath the <body> tag:"
111,,,"find() (and its convenience equivalent) gives you only the first tag
by that name:"
112,,,"If you need to get all the <a> tags, you can use find_all():"
113,,,"For more complicated tasks, such as pattern-matching and filtering, you can
use the methods described in Searching the tree."
114,,,A tag's children are available in a list called .contents:
115,,,"The BeautifulSoup object itself has children. In this case, the
<html> tag is the child of the BeautifulSoup object.:"
116,,,"A string does not have .contents, because it can't contain
anything:"
117,,,"Instead of getting them as a list, you can iterate over a tag's
children using the .children generator:"
118,,,"If you want to modify a tag's children, use the methods described in
Modifying the tree. Don't modify the the .contents list
directly: that can lead to problems that are subtle and difficult to
spot."
119,,,"The .contents and .children attributes consider only a tag's
direct children. For instance, the <head> tag has a single direct
child—the <title> tag:"
120,,,"But the <title> tag itself has a child: the string ""The Dormouse's
story"". There's a sense in which that string is also a child of the
<head> tag. The .descendants attribute lets you iterate over all
of a tag's children, recursively: its direct children, the children of
its direct children, and so on:"
121,,,"The <head> tag has only one child, but it has two descendants: the
<title> tag and the <title> tag's child. The BeautifulSoup object
only has one direct child (the <html> tag), but it has a whole lot of
descendants:"
122,,,"If a tag has only one child, and that child is a NavigableString,
the child is made available as .string:"
123,,,"If a tag's only child is another tag, and that tag has a
.string, then the parent tag is considered to have the same
.string as its child:"
124,,,"If a tag contains more than one thing, then it's not clear what
.string should refer to, so .string is defined to be
None:"
125,,,"If there's more than one thing inside a tag, you can still look at
just the strings. Use the .strings generator to see all descendant
strings:"
126,,,"Newlines and spaces that separate tags are also strings. You can remove extra
whitespace by using the .stripped_strings generator instead:"
127,,,"Here, strings consisting entirely of whitespace are ignored, and
whitespace at the beginning and end of strings is removed."
128,,,"Continuing the ""family tree"" analogy, every tag and every string has a
parent: the tag that contains it."
129,,,"You can access an element's parent with the .parent attribute. In
the example ""three sisters"" document, the <head> tag is the parent
of the <title> tag:"
130,,,"The title string itself has a parent: the <title> tag that contains
it:"
131,,,"The parent of a top-level tag like <html> is the BeautifulSoup object
itself:"
132,,,And the .parent of a BeautifulSoup object is defined as None:
133,,,"You can iterate over all of an element's parents with
.parents. This example uses .parents to travel from an <a> tag
buried deep within the document, to the very top of the document:"
134,,,"The .self_and_parents generator is a variant of .parents which
gives you the entire ancestry of an element, including the element
itself:"
135,,,Consider a simple document like this:
136,,,"The <b> tag and the <c> tag are at the same level: they're both direct
children of the same tag. We call them siblings. When a document is
pretty-printed, siblings show up at the same indentation level. You
can also use this relationship in the code you write."
137,,,"You can use .next_sibling and .previous_sibling to navigate
between page elements that are on the same level of the parse tree:"
138,,,"The <b> tag has a .next_sibling, but no .previous_sibling,
because there's nothing before the <b> tag on the same level of the
tree. For the same reason, the <c> tag has a .previous_sibling
but no .next_sibling:"
139,,,"The strings ""text1"" and ""text2"" are not siblings, because they don't
have the same parent:"
140,,,"In real documents, the .next_sibling or .previous_sibling of a
tag will usually be a string containing whitespace. Going back to the
""three sisters"" document:"
141,,,"You might think that the .next_sibling of the first <a> tag would
be the second <a> tag. But actually, it's a string: the comma and
newline that separate the first <a> tag from the second:"
142,,,The second <a> tag is then the .next_sibling of the comma string:
143,,,"You can iterate over a tag's siblings with .next_siblings or
.previous_siblings:"
144,,,"(If the argument syntax to find tags by their attribute value is unfamiliar,
don't worry; this is covered later in The keyword arguments.)"
145,,,"Take a look at the beginning of the ""three sisters"" document:"
146,,,"An HTML parser takes this string of characters and turns it into a
series of events: ""open an <html> tag"", ""open a <head> tag"", ""open a
<title> tag"", ""add a string"", ""close the <title> tag"", ""open a <p>
tag"", and so on. The order in which the opening tags and strings are
encountered is called document order. Beautiful Soup offers tools for
searching a document's elements in document order."
147,,,"The .next_element attribute of a string or tag points to whatever
was parsed immediately after the opening of the current tag or after
the current string. It might be the same as .next_sibling, but it's
usually drastically different."
148,,,"Here's the final <a> tag in the ""three sisters"" document. Its
.next_sibling is a string: the conclusion of the sentence that was
interrupted by the start of the <a> tag:"
149,,,"But the .next_element of that <a> tag, the thing that was parsed
immediately after the <a> tag, is not the rest of that sentence:
it's the string ""Tillie"" inside it:"
150,,,"That's because in the original markup, the word ""Tillie"" appeared
before that semicolon. The parser encountered an <a> tag, then the
word ""Tillie"", then the closing </a> tag, then the semicolon and rest of
the sentence. The semicolon is on the same level as the <a> tag, but the
word ""Tillie"" was encountered first."
151,,,"The .previous_element attribute is the exact opposite of
.next_element. It points to the opening tag or string that was
parsed immediately before this one:"
152,,,"You should get the idea by now. You can use these iterators to move
forward or backward in the document as it was parsed:"
153,,,"Beautiful Soup defines a lot of methods for searching the parse tree,
but they're all very similar. I'm going to spend a lot of time explaining
the two most popular methods: find() and find_all(). The other
methods take almost exactly the same arguments, so I'll just cover
them briefly."
154,,,"Once again, I'll be using the ""three sisters"" document as an example:"
155,,,"By passing in a filter to a method like find_all(), you can
zoom in on the parts of the document you're interested in."
156,,,"Before talking in detail about find_all() and similar methods, I
want to show examples of different filters you can pass into these
methods. These filters show up again and again, throughout the
search API. You can use them to filter based on a tag's name,
on its attributes, on the text of a string, or on some combination of
these."
157,,,"The simplest filter is a string. Pass a string to a search method and
Beautiful Soup will perform a tag-name match against that exact string.
This code finds all the <b> tags in the document:"
158,,,"If you pass in a byte string, Beautiful Soup will assume the string is
encoded as UTF-8. You can avoid this by passing in a Unicode string instead."
159,,,"If you pass in a regular expression object, Beautiful Soup will filter
against that regular expression using its search() method. This code
finds all the tags whose names start with the letter ""b""; in this
case, the <body> tag and the <b> tag:"
160,,,This code finds all the tags whose names contain the letter 't':
161,,,"The value True matches every tag it can. This code finds all
the tags in the document, but none of the text strings:"
162,,,"If none of the other matches work for you, define a function that
takes an element as its only argument. The function should return
True if the argument matches, and False otherwise."
163,,,"Here's a function that returns True if a tag defines the ""class""
attribute but doesn't define the ""id"" attribute:"
164,,,"Pass this function into find_all() and you'll pick up all the <p>
tags:"
165,,,"This function picks up only the <p> tags. It doesn't pick up the <a>
tags, because those tags define both ""class"" and ""id"". It doesn't pick
up tags like <html> and <title>, because those tags don't define
""class""."
166,,,"The function can be as complicated as you need it to be. Here's a
function that returns True if a tag is surrounded by string
objects:"
167,,,"If you pass in a list, Beautiful Soup will look for a match against
any string, regular expression, or function in that list. This
code finds all the <a> tags and all the <b> tags:"
168,,,Now we're ready to look at the search methods in detail.
169,,,"Method signature: find_all(name, attrs, recursive, string, limit, **kwargs)"
170,,,"The find_all() method looks through a tag's descendants and
retrieves all descendants that match your filters. I gave several
examples in Kinds of filters, but here are a few more:"
171,,,"Some of these should look familiar, but others are new. What does it
mean to pass in a value for string, or id? Why does
find_all(""p"", ""title"") find a <p> tag with the CSS class ""title""?
Let's look at the arguments to find_all()."
172,,,"Pass in a value for name and you'll tell Beautiful Soup to only
consider tags with certain names. Text strings will be ignored, as
will tags whose names that don't match."
173,,,This is the simplest usage:
174,,,"Recall from Kinds of filters that the value to name can be a
string, a regular expression, a list, a function, or the value
True."
175,,,"Any keyword argument that's not recognized will be turned into a filter
that matches tags by their attributes."
176,,,"If you pass in a value for an argument called id, Beautiful Soup will
filter against each tag's 'id' attribute value:"
177,,,"Just as with tags, you can filter an attribute based on a string,
a regular expression, a list, a function, or the value True."
178,,,"If you pass in a regular expression object for href, Beautiful Soup will
pattern-match against each tag's 'href' attribute value:"
179,,,"The value True matches every tag that defines the attribute. This code
finds all tags with an id attribute:"
180,,,"For more complex matches, you can define a function that takes an attribute
value as its only argument. The function should return True if the value
matches, and False otherwise."
181,,,"Here's a function that finds all a tags whose href attribute does not
match a regular expression:"
182,,,"If you pass in a list for an argument, Beautiful Soup will look for an
attribute-value match against any string, regular expression, or function in
that list. This code finds the first and last link:"
183,,,"You can filter against multiple attributes at once by passing multiple
keyword arguments:"
184,,,"Some attributes, like the data-* attributes in HTML 5, have names that
can't be used as the names of keyword arguments:"
185,,,"You can use these attributes in searches by putting them into a
dictionary and passing the dictionary into find_all() as the
attrs argument:"
186,,,"Similarly, you can't use a keyword argument to search for HTML's 'name' attribute,
because Beautiful Soup uses the name argument to contain the name
of the tag itself. Instead, you can give a value to 'name' in the
attrs argument:"
187,,,"It's very useful to search for a tag that has a certain CSS class, but
the name of the CSS attribute, ""class"", is a reserved word in
Python. Using class as a keyword argument will give you a syntax
error. As of Beautiful Soup 4.1.2, you can search by CSS class using
the keyword argument class_:"
188,,,"As with any keyword argument, you can pass class_ a string, a regular
expression, a function, or True:"
189,,,"Remember that a single tag can have multiple
values for its ""class"" attribute. When you search for a tag that
matches a certain CSS class, you're matching against any of its CSS
classes:"
190,,,You can also search for the exact string value of the class attribute:
191,,,But searching for variants of the string value won't work:
192,,,"In older versions of Beautiful Soup, which don't have the class_
shortcut, you can use the attrs argument trick mentioned above.
Create a dictionary whose value for ""class"" is the string (or regular
expression, or whatever) you want to search for:"
193,,,"To search for tags that match two or more CSS classes at once, use the
Tag.select() CSS selector method described here:"
194,,,"With the string argument, you can search for strings instead of tags. As
with name and attribute keyword arguments, you can pass in a string, a
regular expression, a function, a list, or the value True.
Here are some examples:"
195,,,"If you use the string argument in a tag search, Beautiful Soup will find
all tags whose .string matches your value for string. This code finds
the <a> tags whose .string is ""Elsie"":"
196,,,"The string argument is new in Beautiful Soup 4.4.0. In earlier
versions it was called text:"
197,,,"find_all() returns all the tags and strings that match your
filters. This can take a while if the document is large. If you don't
need all the results, you can pass in a number for limit. This
works just like the LIMIT keyword in SQL. It tells Beautiful Soup to
stop gathering results after it's found a certain number."
198,,,"There are three links in the ""three sisters"" document, but this code
only finds the first two:"
199,,,"By default, mytag.find_all() will examine all the descendants of mytag:
its children, its children's children, and so on. To consider only direct
children, you can pass in recursive=False. See the difference here:"
200,,,Here's that part of the document:
201,,,"The <title> tag is beneath the <html> tag, but it's not directly
beneath the <html> tag: the <head> tag is in the way. Beautiful Soup
finds the <title> tag when it's allowed to look at all descendants of
the <html> tag, but when recursive=False restricts it to the
<html> tag's immediate children, it finds nothing."
202,,,"Beautiful Soup offers a lot of tree-searching methods (covered below),
and they mostly take the same arguments as find_all(): name,
attrs, string, limit, and attribute keyword arguments. But the
recursive argument is specific to the find_all() and find() methods.
Passing recursive=False into a method like find_parents() wouldn't be
very useful."
203,,,"For convenience, calling a BeautifulSoup object or
Tag object as a function is equivalent to calling
find_all() (if no built-in method has the name of the tag you're
looking for). These two lines of code are equivalent:"
204,,,These two lines are also equivalent:
205,,,"Method signature: find(name, attrs, recursive, string, **kwargs)"
206,,,"The find_all() method scans the entire document looking for
results, but sometimes you only want to find one result. If you know a
document has only one <body> tag, it's a waste of time to scan the
entire document looking for more. Rather than passing in limit=1
every time you call find_all, you can use the find()
method. These two lines of code are nearly equivalent:"
207,,,"The only difference is that find_all() returns a list containing
the single result, and find() just returns the result."
208,,,"If find_all() can't find anything, it returns an empty list. If
find() can't find anything, it returns None:"
209,,,"Remember the soup.head.title trick from Navigating using tag
names? That trick works by repeatedly calling find():"
210,,,"Method signature: find_parents(name, attrs, string, limit, **kwargs)"
211,,,"Method signature: find_parent(name, attrs, string, **kwargs)"
212,,,"I spent a lot of time above covering find_all() and
find(). The Beautiful Soup API defines ten other methods for
searching the tree, but don't be afraid. Five of these methods are
basically the same as find_all(), and the other five are basically
the same as find(). The only differences are in how they move from
one part of the tree to another."
213,,,"First let's consider find_parents() and
find_parent(). Remember that find_all() and find() work
their way down the tree, looking at tag's descendants. These methods
do the opposite: they work their way up the tree, looking at a tag's
(or a string's) parents. Let's try them out, starting from a string
buried deep in the ""three daughters"" document:"
214,,,"One of the three <a> tags is the direct parent of the string in
question, so our search finds it. One of the three <p> tags is an
indirect parent (ancestor) of the string, and our search finds that as
well. There's a <p> tag with the CSS class ""title"" somewhere in the
document, but it's not one of this string's parents, so we can't find
it with find_parents()."
215,,,"You may have noticed a similarity between find_parent() and
find_parents(), and the .parent and .parents attributes
mentioned earlier. These search methods actually use the .parents
attribute to iterate through all parents (unfiltered), checking each one
against the provided filter to see if it matches."
216,,,"Method signature: find_next_siblings(name, attrs, string, limit, **kwargs)"
217,,,"Method signature: find_next_sibling(name, attrs, string, **kwargs)"
218,,,"These methods use .next_siblings to
iterate over the rest of an element's siblings in the tree. The
find_next_siblings() method returns all the siblings that match,
and find_next_sibling() returns only the first one:"
219,,,"Method signature: find_previous_siblings(name, attrs, string, limit, **kwargs)"
220,,,"Method signature: find_previous_sibling(name, attrs, string, **kwargs)"
221,,,"These methods use .previous_siblings to iterate over an element's
siblings that precede it in the tree. The find_previous_siblings()
method returns all the siblings that match, and
find_previous_sibling() returns only the first one:"
222,,,"Method signature: find_all_next(name, attrs, string, limit, **kwargs)"
223,,,"Method signature: find_next(name, attrs, string, **kwargs)"
224,,,"These methods use .next_elements to
iterate over whatever tags and strings that come after it in the
document. The find_all_next() method returns all matches, and
find_next() returns only the first match:"
225,,,"In the first example, the string ""Elsie"" showed up, even though it was
contained within the <a> tag we started from. In the second example,
the last <p> tag in the document showed up, even though it's not in
the same part of the tree as the <a> tag we started from. For these
methods, all that matters is that an element matches the filter and
it shows up later in the document in document order."
226,,,"Method signature: find_all_previous(name, attrs, string, limit, **kwargs)"
227,,,"Method signature: find_previous(name, attrs, string, **kwargs)"
228,,,"These methods use .previous_elements to
iterate over the tags and strings that came before it in the
document. The find_all_previous() method returns all matches, and
find_previous() only returns the first match:"
229,,,"The call to find_all_previous(""p"") found the first paragraph in
the document (the one with class=""title""), but it also finds the
second paragraph, the <p> tag that contains the <a> tag we started
with. This shouldn't be too surprising: we're looking at all the tags
that show up earlier in the document in document order than the one we started with. A
<p> tag that contains an <a> tag must have shown up before the <a>
tag it contains."
230,,,"BeautifulSoup and Tag objects support CSS selectors through
their .css property. The actual selector implementation is handled
by the Soup Sieve
package, available on PyPI as soupsieve. If you installed
Beautiful Soup through pip, Soup Sieve was installed at the same
time, so you don't have to do anything extra."
231,,,"The Soup Sieve documentation lists all the currently supported CSS
selectors, but
here are some of the basics. You can find tags by name:"
232,,,Find tags by ID:
233,,,Find tags contained anywhere within other tags:
234,,,Find tags directly within other tags:
235,,,Find all matching next siblings of tags:
236,,,Find the next sibling tag (but only if it matches):
237,,,Find tags by CSS class:
238,,,Find tags that match any selector from a list of selectors:
239,,,Test for the existence of an attribute:
240,,,Find tags by attribute value:
241,,,"There's also a method called select_one(), which finds only the
first tag that matches a selector:"
242,,,"As a convenience, you can call select() and select_one() can
directly on the BeautifulSoup or Tag object, omitting the
.css property:"
243,,,"CSS selector support is a convenience for people who already know the
CSS selector syntax. You can do all of this with the Beautiful Soup
API. If CSS selectors are all you need, you should skip Beautiful Soup
altogether and parse the document with lxml: it's a lot
faster. But Soup Sieve lets you combine CSS selectors with the
Beautiful Soup API."
244,,,"Soup Sieve offers a substantial API beyond the select() and
select_one() methods, and you can access most of that API through
the .css attribute of Tag or BeautifulSoup. What follows
is just a list of the supported methods; see the Soup Sieve
documentation for full
documentation."
245,,,"The iselect() method works the same as select(), but it
returns a generator instead of a list:"
246,,,"The closest() method returns the nearest parent of a given Tag
that matches a CSS selector, similar to Beautiful Soup's
find_parent() method:"
247,,,"The match() method returns a Boolean depending on whether or not a
specific Tag matches a selector:"
248,,,"The filter() method returns the subset of a tag's direct children
that match a selector:"
249,,,"The escape() method escapes CSS identifiers that would otherwise
be invalid:"
250,,,"If you've parsed XML that defines namespaces, you can use them in CSS
selectors.:"
251,,,"Beautiful Soup tries to use namespace prefixes that make sense based
on what it saw while parsing the document, but you can always provide
your own dictionary of abbreviations:"
252,,,"The .css property was added in Beautiful Soup 4.12.0. Prior to this,
only the .select() and .select_one() convenience methods were
supported."
253,,,"The Soup Sieve integration was added in Beautiful Soup 4.7.0. Earlier
versions had the .select() method, but only the most commonly-used
CSS selectors were supported."
254,,,"Beautiful Soup's main strength is in searching the parse tree, but you
can also modify the tree and write your changes as a new HTML or XML
document."
255,,,"I covered this earlier, in Tag.attrs, but it bears repeating. You
can rename a tag, change the values of its attributes, add new
attributes, and delete attributes:"
256,,,"If you set a tag's .string attribute to a new string, the tag's contents are
replaced with that string:"
257,,,"Be careful: if the tag contained other tags, they and all their
contents will be destroyed."
258,,,"You can add to a tag's contents with Tag.append(). It works just
like calling .append() on a Python list:"
259,,,Tag.append() returns the newly appended element.
260,,,"Starting in Beautiful Soup 4.7.0, Tag also supports a method
called .extend(), which adds every element of a list to a Tag,
in order:"
261,,,Tag.extend() returns the list of appended elements.
262,,,"If you need to add a string to a document, no problem—you can pass a
Python string in to append(), or you can call the NavigableString
constructor:"
263,,,"If you want to create a comment or some other subclass of
NavigableString, just call the constructor:"
264,,,(This is a new feature in Beautiful Soup 4.4.0.)
265,,,"What if you need to create a whole new tag? The best solution is to
call the factory method BeautifulSoup.new_tag():"
266,,,"Only the first argument, the tag name, is required."
267,,,(The ``string`` argument to ``new_tag`` was introduced in Beautiful Soup 4.13.0.)
268,,,"Because insertion methods return the newly inserted element, you
can create, insert, and obtain an element in one step:"
269,,,"Tag.insert() is just like Tag.append(), except the new element
doesn't necessarily go at the end of its parent's
.contents. It will be inserted at whatever numeric position you
say, similar to .insert() on a Python list:"
270,,,"You can pass more than one element into Tag.insert(). All the
elements will be inserted, starting at the numeric position you
provide."
271,,,Tag.insert() returns the list of newly inserted elements.
272,,,"The insert_before() method inserts tags or strings immediately
before something else in the parse tree:"
273,,,"The insert_after() method inserts tags or strings immediately
after something else in the parse tree:"
274,,,Both methods return the list of newly inserted elements.
275,,,Tag.clear() removes the contents of a tag:
276,,,"PageElement.extract() removes a tag or string from the tree. It
returns the tag or string that was extracted:"
277,,,"At this point you effectively have two parse trees: one rooted at the
BeautifulSoup object you used to parse the document, and one rooted
at the tag that was extracted. You can go on to call extract() on
a child of the element you extracted:"
278,,,"Tag.decompose() removes a tag from the tree, then completely
destroys it and its contents:"
279,,,"The behavior of a decomposed Tag or NavigableString is not
defined and you should not use it for anything. If you're not sure
whether something has been decomposed, you can check its
.decomposed property (new in Beautiful Soup 4.9.0):"
280,,,"PageElement.replace_with() extracts a tag or string from the tree,
then replaces it with one or more tags or strings of your choice:"
281,,,"replace_with() returns the tag or string that got replaced, so
that you can examine it or add it back to another part of the tree."
282,,,"The ability to pass multiple arguments into replace_with() is new
in Beautiful Soup 4.10.0."
283,,,"PageElement.wrap() wraps an element in the Tag object you specify. It
returns the new wrapper:"
284,,,This method is new in Beautiful Soup 4.0.5.
285,,,"Tag.unwrap() is the opposite of wrap(). It replaces a tag with
whatever's inside that tag. It's good for stripping out markup:"
286,,,"Like replace_with(), unwrap() returns the tag
that was replaced."
287,,,"After calling a bunch of methods that modify the parse tree, you may end up
with two or more NavigableString objects next to each other.
Beautiful Soup doesn't have any problems with this, but since it can't happen
in a freshly parsed document, you might not expect behavior like the
following:"
288,,,You can call Tag.smooth() to clean up the parse tree by consolidating adjacent strings:
289,,,This method is new in Beautiful Soup 4.8.0.
290,,,"The prettify() method will turn a Beautiful Soup parse tree into a
nicely formatted Unicode string, with a separate line for each
tag and each string:"
291,,,"You can call prettify() on the top-level BeautifulSoup object,
or on any of its Tag objects:"
292,,,"Since it adds whitespace (in the form of newlines), prettify()
changes the meaning of an HTML document and should not be used to
reformat one. The goal of prettify() is to help you visually
understand the structure of the documents you work with."
293,,,"If you just want a string, with no fancy formatting, you can call
str() on a BeautifulSoup object, or on a Tag within it:"
294,,,"The str() function returns a string encoded in UTF-8. See
Encodings for other options."
295,,,"You can also call encode() to get a bytestring, and decode()
to get Unicode."
296,,,"If you give Beautiful Soup a document that contains HTML entities like
""&lquot;"", they'll be converted to Unicode characters:"
297,,,"If you then convert the document to a bytestring, the Unicode characters
will be encoded as UTF-8. You won't get the HTML entities back:"
298,,,"By default, the only characters that are escaped upon output are bare
ampersands and angle brackets. These get turned into ""&amp;"", ""&lt;"",
and ""&gt;"", so that Beautiful Soup doesn't inadvertently generate
invalid HTML or XML:"
299,,,"You can change this behavior by providing a value for the
formatter argument to prettify(), encode(), or
decode(). Beautiful Soup recognizes five possible values for
formatter."
300,,,"The default is formatter=""minimal"". Strings will only be processed
enough to ensure that Beautiful Soup generates valid HTML/XML:"
301,,,"If you pass in formatter=""html"", Beautiful Soup will convert
Unicode characters to HTML entities whenever possible:"
302,,,"If you pass in formatter=""html5"", it's similar to
formatter=""html"", but Beautiful Soup will
omit the closing slash in HTML void tags like ""br"":"
303,,,"In addition, any attributes whose values are the empty string
will become HTML-style Boolean attributes:"
304,,,(This behavior is new as of Beautiful Soup 4.10.0.)
305,,,"If you pass in formatter=None, Beautiful Soup will not modify
strings at all on output. This is the fastest option, but it may lead
to Beautiful Soup generating invalid HTML/XML, as in these examples:"
306,,,"If you need more sophisticated control over your output, you can
instantiate one of Beautiful Soup's formatter classes and pass that
object in as formatter."
307,,,Used to customize the formatting rules for HTML documents.
308,,,"Here's a formatter that converts strings to uppercase, whether they
occur in a string object or an attribute value:"
309,,,Here's a formatter that increases the indentation width when pretty-printing:
310,,,Used to customize the formatting rules for XML documents.
311,,,"Subclassing HTMLFormatter or XMLFormatter will
give you even more control over the output. For example, Beautiful
Soup sorts the attributes in every tag by default:"
312,,,"To turn this off, you can subclass the Formatter.attributes()
method, which controls which attributes are output and in what
order. This implementation also filters out the attribute called ""m""
whenever it appears:"
313,,,"One last caveat: if you create a CData object, the text inside
that object is always presented exactly as it appears, with no
formatting. Beautiful Soup will call your entity substitution
function, just in case you've written a custom function that counts
all the strings in the document or something, but it will ignore the
return value:"
314,,,"If you only want the human-readable text inside a document or tag, you can use the
get_text() method. It returns all the text in a document or
beneath a tag, as a single Unicode string:"
315,,,"You can specify a string to be used to join the bits of text
together:"
316,,,"You can tell Beautiful Soup to strip whitespace from the beginning and
end of each bit of text:"
317,,,"But at that point you might want to use the .stripped_strings
generator instead, and process the text yourself:"
318,,,"As of Beautiful Soup version 4.9.0, when lxml or html.parser are in
use, the contents of <script>, <style>, and <template>
tags are generally not considered to be 'text', since those tags are not part of
the human-visible content of the page."
319,,,"As of Beautiful Soup version 4.10.0, you can call get_text(),
.strings, or .stripped_strings on a NavigableString object. It will
either return the object itself, or nothing, so the only reason to do
this is when you're iterating over a mixed list."
320,,,"As of Beautiful Soup version 4.13.0, you can call .string on a
NavigableString object. It will return the object itself, so again,
the only reason to do this is when you're iterating over a mixed
list."
321,,,"If you just need to parse some HTML, you can dump the markup into the
BeautifulSoup constructor, and it'll probably be fine. Beautiful
Soup will pick a parser for you and parse the data. But there are a
few additional arguments you can pass in to the constructor to change
which parser is used."
322,,,"The first argument to the BeautifulSoup constructor is a string or
an open filehandle—the source of the markup you want parsed. The second
argument is how you'd like the markup parsed."
323,,,"If you don't specify anything, you'll get the best HTML parser that's
installed. Beautiful Soup ranks lxml's parser as being the best, then
html5lib's, then Python's built-in parser. You can override this by
specifying one of the following:"
324,,,"What type of markup you want to parse. Currently supported values are
""html"", ""xml"", and ""html5""."
325,,,"The name of the parser library you want to use. Currently supported
options are ""lxml"", ""html5lib"", and ""html.parser"" (Python's
built-in HTML parser)."
326,,,The section Installing a parser contrasts the supported parsers.
327,,,"If you ask for a parser that isn't installed, Beautiful Soup will
raise an exception so that you don't inadvertently parse a document
under an unknown set of rules. For example, right now, the only
supported XML parser is lxml. If you don't have lxml installed, asking
for an XML parser won't give you one, and asking for ""lxml"" won't work
either."
328,,,"Beautiful Soup presents the same interface to a number of different
parsers, but each parser is different. Different parsers will create
different parse trees from the same document. The biggest differences
are between the HTML parsers and the XML parsers. Here's a short
document, parsed as HTML using the parser that comes with Python:"
329,,,"Since a standalone <b/> tag is not valid HTML, html.parser turns it into
a <b></b> tag pair."
330,,,"Here's the same document parsed as XML (running this requires that you
have lxml installed). Note that the standalone <b/> tag is left alone, and
that the document is given an XML declaration instead of being put
into an <html> tag.:"
331,,,"There are also differences between HTML parsers. If you give Beautiful
Soup a perfectly-formed HTML document, these differences won't
matter. One parser will be faster than another, but they'll all give
you a data structure that looks exactly like the original HTML
document."
332,,,"But if the document is not perfectly-formed, different parsers will
give different results. Here's a short, invalid document parsed using
lxml's HTML parser. Note that the <a> tag gets wrapped in <body> and
<html> tags, and the dangling </p> tag is simply ignored:"
333,,,Here's the same document parsed using html5lib:
334,,,"Instead of ignoring the dangling </p> tag, html5lib pairs it with an
opening <p> tag. html5lib also adds an empty <head> tag; lxml didn't
bother."
335,,,"Here's the same document parsed with Python's built-in HTML
parser:"
336,,,"Like lxml, this parser ignores the closing </p> tag. Unlike
html5lib or lxml, this parser makes no attempt to create a
well-formed HTML document by adding <html> or <body> tags."
337,,,"Since the document ""<a></p>"" is invalid, none of these techniques is
the 'correct' way to handle it. The html5lib parser uses techniques
that are part of the HTML5 standard, so it has the best claim on being
the 'correct' way, but all three techniques are legitimate."
338,,,"Differences between parsers can affect your script. If you're planning
on distributing your script to other people, or running it on multiple
machines, you should specify a parser in the BeautifulSoup
constructor. That will reduce the chances that your users parse a
document differently from the way you parse it."
339,,,"Any HTML or XML document is written in a specific encoding like ASCII
or UTF-8. But when you load that document into Beautiful Soup, you'll
discover it's been converted to Unicode:"
340,,,"It's not magic. (That sure would be nice.) Beautiful Soup uses a
sub-library called Unicode, Dammit to detect a document's encoding
and convert it to Unicode. The autodetected encoding is available as
the .original_encoding attribute of the BeautifulSoup object:"
341,,,"If .original_encoding is None, that means the document was
already Unicode when it was passed into Beautiful Soup:"
342,,,"Unicode, Dammit guesses correctly most of the time, but sometimes it
makes mistakes. Sometimes it guesses correctly, but only after a
byte-by-byte search of the document that takes a very long time. If
you happen to know a document's encoding ahead of time, you can avoid
mistakes and delays by passing it to the BeautifulSoup constructor
as from_encoding."
343,,,"Here's a document written in ISO-8859-8. The document is so short that
Unicode, Dammit can't get a lock on it, and misidentifies it as
ISO-8859-7:"
344,,,We can fix this by passing in the correct from_encoding:
345,,,"If you don't know what the correct encoding is, but you know that
Unicode, Dammit is guessing wrong, you can pass the wrong guesses in
as exclude_encodings:"
346,,,"Windows-1255 isn't 100% correct, but that encoding is a compatible
superset of ISO-8859-8, so it's close enough. (exclude_encodings
is a new feature in Beautiful Soup 4.4.0.)"
347,,,"In rare cases (usually when a UTF-8 document contains text written in
a completely different encoding), the only way to get Unicode may be
to replace some characters with the special Unicode character
""REPLACEMENT CHARACTER"" (U+FFFD, �). If Unicode, Dammit needs to do
this, it will set the .contains_replacement_characters attribute
to True on the UnicodeDammit or BeautifulSoup object. This
lets you know that the Unicode representation is not an exact
representation of the original—some data was lost. If a document
contains �, but .contains_replacement_characters is False,
you'll know that the � was there originally (as it is in this
paragraph) and doesn't stand in for missing data."
348,,,"When you write out an output document from Beautiful Soup, you get a UTF-8
document, even if the input document wasn't in UTF-8 to begin with. Here's a
document written in the Latin-1 encoding:"
349,,,"Note that the <meta> tag has been rewritten to reflect the fact that
the document is now in UTF-8."
350,,,"If you don't want UTF-8, you can pass an encoding into prettify():"
351,,,"You can also call encode() on the BeautifulSoup object, or any
element in the soup, just as if it were a Python string:"
352,,,"Any characters that can't be represented in your chosen encoding will
be converted into numeric XML entity references. Here's a document
that includes the Unicode character SNOWMAN:"
353,,,"The SNOWMAN character can be part of a UTF-8 document (it looks like
☃), but there's no representation for that character in ISO-Latin-1 or
ASCII, so it's converted into ""&#9731"" for those encodings:"
354,,,"You can use Unicode, Dammit without using Beautiful Soup. It's useful
whenever you have data in an unknown encoding and you just want it to
become Unicode:"
355,,,"Unicode, Dammit's guesses will get a lot more accurate if you install
one of these Python libraries: charset-normalizer, chardet, or
cchardet. The more data you give Unicode, Dammit, the more
accurately it will guess. If you have your own suspicions as to what
the encoding might be, you can pass them in as a list:"
356,,,"Unicode, Dammit has two special features that Beautiful Soup doesn't
use."
357,,,"You can use Unicode, Dammit to convert Microsoft smart quotes to HTML or XML
entities:"
358,,,You can also convert Microsoft smart quotes to ASCII quotes:
359,,,"Hopefully you'll find this feature useful, but Beautiful Soup doesn't
use it. Beautiful Soup prefers the default behavior, which is to
convert Microsoft smart quotes to Unicode characters along with
everything else:"
360,,,"Sometimes a document is mostly in UTF-8, but contains Windows-1252
characters such as (again) Microsoft smart quotes. This can happen
when a website includes data from multiple sources. You can use
UnicodeDammit.detwingle() to turn such a document into pure
UTF-8. Here's a simple example:"
361,,,"This document is a mess. The snowmen are in UTF-8 and the quotes are
in Windows-1252. You can display the snowmen or the quotes, but not
both:"
362,,,"Decoding the document as UTF-8 raises a UnicodeDecodeError, and
decoding it as Windows-1252 gives you gibberish. Fortunately,
UnicodeDammit.detwingle() will convert the string to pure UTF-8,
allowing you to decode it to Unicode and display the snowmen and quote
marks simultaneously:"
363,,,"UnicodeDammit.detwingle() only knows how to handle Windows-1252
embedded in UTF-8 (or vice versa, I suppose), but this is the most
common case."
364,,,"Note that you must know to call UnicodeDammit.detwingle() on your
data before passing it into BeautifulSoup or the UnicodeDammit
constructor. Beautiful Soup assumes that a document has a single
encoding, whatever it might be. If you pass it a document that
contains both UTF-8 and Windows-1252, it's likely to think the whole
document is Windows-1252, and the document will come out looking like
â˜ƒâ˜ƒâ˜ƒ“I like snowmen!”."
365,,,UnicodeDammit.detwingle() is new in Beautiful Soup 4.1.0.
366,,,"The html.parser and html5lib parsers can keep track of where in
the original document each Tag was found. You can access this
information as Tag.sourceline (line number) and Tag.sourcepos
(position of the start tag within a line):"
367,,,"Note that the two parsers mean slightly different things by
sourceline and sourcepos. For html.parser, these numbers
represent the position of the initial less-than sign. For html5lib,
these numbers represent the position of the final greater-than sign:"
368,,,"You can shut off this feature by passing store_line_numbers=False
into the BeautifulSoup constructor:"
369,,,"This feature is new in 4.8.1, and the parsers based on lxml don't
support it."
370,,,"Beautiful Soup says that two NavigableString or Tag objects
are equal when they represent the same HTML or XML markup, even if their
attributes are in a different order or they live in different parts of the
object tree. In this example, the two <b> tags are treated as equal, because
they both look like ""<b>pizza</b>"":"
371,,,"If you want to see whether two variables refer to exactly the same
object, use is:"
372,,,"You can use copy.copy() to create a copy of any Tag or
NavigableString:"
373,,,"The copy is considered equal to the original, since it represents the
same markup as the original, but it's not the same object:"
374,,,"The only real difference is that the copy is completely detached from
the original Beautiful Soup object tree, just as if extract() had
been called on it. This is because two different Tag
objects can't occupy the same space at the same time."
375,,,"You can use Tag.copy_self() to create a copy of a
Tag without copying its contents."
376,,,(Tag.copy_self() is introduced in Beautiful Soup 4.13.0.)
377,,,"Almost everyone who uses Beautiful Soup to extract information from a
document can get what they need using the methods described in
Searching the tree. However, there's a lower-level interface that
lets you define any matching behavior you want. Behind the scenes, the
parts of the Beautiful Soup API that most people use--find_all()
and the like—are actually using this low-level interface, and you
can use it directly."
378,,,"(Access to the low-level search interface is a new feature in
Beautiful Soup 4.13.0.)"
379,,,"The ElementFilter class is your entry point to the
low-level interface. To use it, define a function that takes a
PageElement object (which could be either a
Tag or a NavigableString). The function must
return True if the element matches your custom criteria, and
False if it doesn't."
380,,,"This example function looks for content-containing tags and strings,
but skips whitespace-only strings:"
381,,,"Once you have a function, pass it into the ElementFilter constructor:"
382,,,"You can then use this ElementFilter object as the first
argument to any of the Searching the tree methods. Whatever
criteria you defined in your function will be used instead of the
default Beautiful Soup match logic:"
383,,,"Every potential match will be run through your function, and the only
PageElement objects returned will be the ones where your
function returned True."
384,,,"To summarize the function-based matching behaviors,"
385,,,"A function passed as the first argument to a search method
(or equivalently, using the name argument) considers only
Tag objects."
386,,,"A function passed to a search method using the string argument
considers only NavigableString objects."
387,,,"A function passed to a search method using an ElementFilter
object considers both Tag and NavigableString
objects."
388,,,"By passing an ElementFilter instance into Beautiful Soup's
tree-searching methods, you can completely customize what it means for
Beautiful Soup to match an element as it iterates over the parse
tree. By using the ElementFilter.filter() method, you can
also completely customize what it means for Beautiful Soup to iterate
over the parse tree in the first place."
389,,,"The ElementFilter.filter() method takes a generator that yields
a stream of PageElement objects. There is no restriction
on which PageElement objects show up, how many times they
show up, or in which order. Theoretically, they don't even need to be
from the same BeautifulSoup document. You can do whatever
makes sense for you."
390,,,"Here's a silly example: a generator that walks randomly back and forth
through the parse tree:"
391,,,"Pass this generator into the example ElementFilter.filter()
and Beautiful Soup will wander randomly around the parse tree,
applying the non_whitespace_filter function to every element it finds,
and yielding all of the matches—potentially yielding a given object
more than once:"
392,,,"(Note that unlike the other code examples in this documentation, this
example can give different results every time you run it, thanks
to the random element. It's very unlikely, but this function could
wander around the parse tree forever and never complete.)"
393,,,"Beautiful Soup offers a number of ways to customize how the parser
treats incoming HTML and XML. This section covers the most commonly
used customization techniques."
394,,,"Let's say you want to use Beautiful Soup to look at a document's <a>
tags. It's a waste of time and memory to parse the entire document and
then go over it again looking for <a> tags. It would be much faster to
ignore everything that wasn't an <a> tag in the first place. The
SoupStrainer class allows you to choose which parts of an incoming
document are parsed. You just create a SoupStrainer and pass it in
to the BeautifulSoup constructor as the parse_only argument."
395,,,"(Note that this feature won't work if you're using the html5lib parser.
If you use html5lib, the whole document will be parsed, no
matter what. This is because html5lib constantly rearranges the parse
tree as it works, and if some part of the document didn't actually
make it into the parse tree, it'll crash. To avoid confusion, in the
examples below I'll be forcing Beautiful Soup to use Python's
built-in parser.)"
396,,,"The SoupStrainer class takes the same arguments as a typical
method from Searching the tree: name, attrs, string, and **kwargs. Here are
three SoupStrainer objects:"
397,,,"I'm going to bring back the ""three sisters"" document one more time,
and we'll see what the document looks like when it's parsed with these
three SoupStrainer objects:"
398,,,The SoupStrainer behavior is as follows:
399,,,"When a tag matches, it is kept (including all its contents, whether they also
match or not)."
400,,,"When a tag does not match, the tag itself is not kept, but parsing continues
into its contents to look for other tags that do match."
401,,,"In an HTML document, an attribute like class is given a list of
values, and an attribute like id is given a single value, because
the HTML specification treats those attributes differently:"
402,,,"You can turn this off by passing in
multi_valued_attributes=None. Than all attributes will be given a
single value:"
403,,,"You can customize this behavior quite a bit by passing in a
dictionary for multi_valued_attributes. If you need this, look at
HTMLTreeBuilder.DEFAULT_CDATA_LIST_ATTRIBUTES to see the
configuration Beautiful Soup uses by default, which is based on the
HTML specification."
404,,,(This is a new feature in Beautiful Soup 4.8.0.)
405,,,"When using the html.parser parser, you can use the
on_duplicate_attribute constructor argument to customize what
Beautiful Soup does when it encounters a tag that defines the same
attribute more than once:"
406,,,The default behavior is to use the last value found for the tag:
407,,,"With on_duplicate_attribute='ignore' you can tell Beautiful Soup
to use the first value found and ignore the rest:"
408,,,"(lxml and html5lib always do it this way; their behavior can't be
configured from within Beautiful Soup.)"
409,,,"If you need more control, you can pass in a function that's called on each
duplicate value:"
410,,,(This is a new feature in Beautiful Soup 4.9.1.)
411,,,"When a parser tells Beautiful Soup about a tag or a string, Beautiful
Soup will instantiate a Tag or NavigableString object to
contain that information. Instead of that default behavior, you can
tell Beautiful Soup to instantiate subclasses of Tag or
NavigableString, subclasses you define with custom behavior:"
412,,,"This can be useful when incorporating Beautiful Soup into a test
framework."
413,,,(This is a new feature in Beautiful Soup 4.8.1.)
414,,,"If you're having trouble understanding what Beautiful Soup does to a
document, pass the document into the diagnose() function. (This function is new in
Beautiful Soup 4.2.0.) Beautiful Soup will print out a report showing
you how different parsers handle the document, and tell you if you're
missing a parser that Beautiful Soup could be using:"
415,,,"Just looking at the output of diagnose() might show you how to solve the
problem. Even if not, you can paste the output of diagnose() when
asking for help."
416,,,"There are two different kinds of parse errors. There are crashes,
where you feed a document to Beautiful Soup and it raises an
exception (usually an HTMLParser.HTMLParseError). And there is
unexpected behavior, where a Beautiful Soup parse tree looks a lot
different than the document used to create it."
417,,,"These problems are almost never problems with Beautiful Soup itself.
This is not because Beautiful Soup is an amazingly well-written piece
of software. It's because Beautiful Soup doesn't include any parsing
code. Instead, it relies on external parsers. If one parser isn't
working on a certain document, the best solution is to try a different
parser. See Installing a parser for details and a parser
comparison. If this doesn't help, you might need to inspect the
document tree found inside the BeautifulSoup object, to see where
the markup you're looking for actually ended up."
418,,,"SyntaxError: Invalid syntax (on the line ROOT_TAG_NAME =
'[document]'): Caused by running an old Python 2 version of
Beautiful Soup under Python 3, without converting the code."
419,,,"ImportError: No module named HTMLParser - Caused by running an old
Python 2 version of Beautiful Soup under Python 3."
420,,,"ImportError: No module named html.parser - Caused by running the
Python 3 version of Beautiful Soup under Python 2."
421,,,"ImportError: No module named BeautifulSoup - Caused by running
Beautiful Soup 3 code in an environment that doesn't have BS3
installed. Or, by writing Beautiful Soup 4 code without knowing that
the package name has changed to bs4."
422,,,"ImportError: No module named bs4 - Caused by running Beautiful
Soup 4 code in an environment that doesn't have BS4 installed."
423,,,"By default, Beautiful Soup parses documents as HTML. To parse a
document as XML, pass in ""xml"" as the second argument to the
BeautifulSoup constructor:"
424,,,You'll need to have lxml installed.
425,,,"If your script works on one computer but not another, or in one
virtual environment but not another, or outside the virtual
environment but not inside, it's probably because the two
environments have different parser libraries available. For example,
you may have developed the script on a computer that has lxml
installed, and then tried to run it on a computer that only has
html5lib installed. See Differences between parsers for why this
matters, and fix the problem by mentioning a specific parser library
in the BeautifulSoup constructor."
426,,,"Because HTML tags and attributes are case-insensitive, all three HTML
parsers convert tag and attribute names to lowercase. That is, the
markup <TAG></TAG> is converted to <tag></tag>. If you want to
preserve mixed-case or uppercase tags and attributes, you'll need to
parse the document as XML."
427,,,"UnicodeEncodeError: 'charmap' codec can't encode character
'\xfoo' in position bar (or just about any other
UnicodeEncodeError) - This problem shows up in two main
situations. First, when you try to print a Unicode character that
your console doesn't know how to display. (See this page on the
Python wiki for help.)
Second, when you're writing to a file and you pass in a Unicode
character that's not supported by your default encoding. In this
case, the simplest solution is to explicitly encode the Unicode
string into UTF-8 with u.encode(""utf8"")."
428,,,"KeyError: [attr] - Caused by accessing tag['attr'] when the
tag in question doesn't define the attr attribute. The most
common errors are KeyError: 'href' and KeyError: 'class'.
Use tag.get('attr') if you're not sure attr is
defined, just as you would with a Python dictionary."
429,,,"AttributeError: 'ResultSet' object has no attribute 'foo' - This
usually happens because you expected find_all() to return a
single tag or string. But find_all() returns a list of tags
and strings—a ResultSet object. You need to iterate over the
list and look at the .foo of each one. Or, if you really only
want one result, you need to use find() instead of
find_all()."
430,,,"AttributeError: 'NoneType' object has no attribute 'foo' - This
usually happens because you called find() and then tried to
access the .foo attribute of the result. But in your case,
find() didn't find anything, so it returned None, instead of
returning a tag or a string. You need to figure out why your
find() call isn't returning anything."
431,,,"AttributeError: 'NavigableString' object has no attribute
'foo' - This usually happens because you're treating a string as
though it were a tag. You may be iterating over a list, expecting
that it contains nothing but tags, when it actually contains both tags and
strings."
432,,,"Beautiful Soup will never be as fast as the parsers it sits on top
of. If response time is critical, if you're paying for computer time
by the hour, or if there's any other reason why computer time is more
valuable than programmer time, you should forget about Beautiful Soup
and work directly atop lxml."
433,,,"That said, there are things you can do to speed up Beautiful Soup. If
you're not using lxml as the underlying parser, my advice is to
start. Beautiful Soup parses documents
significantly faster using lxml than using html.parser or html5lib."
434,,,"You can speed up encoding detection significantly by installing the
cchardet library."
435,,,"Parsing only part of a document won't save you much time parsing
the document, but it can save a lot of memory, and it'll make
searching the document much faster."
436,,,"New translations of the Beautiful Soup documentation are greatly
appreciated. Translations should be licensed under the MIT license,
just like Beautiful Soup and its English documentation are."
437,,,"There are two ways of getting your translation into the main code base
and onto the Beautiful Soup website:"
438,,,"Create a branch of the Beautiful Soup repository, add your
translation, and propose a merge with the main branch, the same
as you would do with a proposed change to the source code."
439,,,"Send a message to the Beautiful Soup discussion group with a link to
your translation, or attach your translation to the message."
440,,,"Use the Chinese or Brazilian Portuguese translations as your model. In
particular, please translate the source file doc/index.rst,
rather than the HTML version of the documentation. This makes it
possible to publish the documentation in a variety of formats, not
just HTML."
441,,,"Beautiful Soup 3 is the previous release series, and is no longer
supported. Development of Beautiful Soup 3 stopped in 2012, and the
package was completely discontinued in 2021. There's no reason to
install it unless you're trying to get very old software to work, but
it's published through PyPi as BeautifulSoup:"
442,,,$ pip install BeautifulSoup
443,,,"You can also download a tarball of the final release, 3.2.2."
444,,,"If you ran pip install beautifulsoup or pip install
BeautifulSoup, but your code doesn't work, you installed Beautiful
Soup 3 by mistake. You need to run pip install beautifulsoup4."
445,,,The documentation for Beautiful Soup 3 is archived online.
446,,,"Most code written against Beautiful Soup 3 will work against Beautiful
Soup 4 with one simple change. All you should have to do is change the
package name from BeautifulSoup to bs4. So this:"
447,,,becomes this:
448,,,"If you get the ImportError ""No module named BeautifulSoup"", your
problem is that you're trying to run Beautiful Soup 3 code, but you
only have Beautiful Soup 4 installed."
449,,,"If you get the ImportError ""No module named bs4"", your problem
is that you're trying to run Beautiful Soup 4 code, but you only
have Beautiful Soup 3 installed."
450,,,"Although BS4 is mostly backward-compatible with BS3, most of its
methods have been deprecated and given new names for PEP 8 compliance. There are numerous other
renames and changes, and a few of them break backward compatibility."
451,,,Here's what you'll need to know to convert your BS3 code and habits to BS4:
452,,,"Beautiful Soup 3 used Python's SGMLParser, a module that was
deprecated and removed in Python 3.0. Beautiful Soup 4 uses
html.parser by default, but you can plug in lxml or html5lib and
use that instead. See Installing a parser for a comparison."
453,,,"Since html.parser is not the same parser as SGMLParser, you
may find that Beautiful Soup 4 gives you a different parse tree than
Beautiful Soup 3 for the same markup. If you swap out html.parser
for lxml or html5lib, you may find that the parse tree changes yet
again. If this happens, you'll need to update your scraping code to
process the new tree."
454,,,"I renamed three attributes to avoid using words that have special
meaning to Python. Unlike my changes to method names (which you'll see
in the form of deprecation warnings), these changes did not
preserve backwards compatibility. If you used these attributes in
BS3, your code will break in BS4 until you change them."
455,,,UnicodeDammit.unicode -> UnicodeDammit.unicode_markup
456,,,Tag.next -> Tag.next_element
457,,,Tag.previous -> Tag.previous_element
458,,,"Some of the generators used to yield None after they were done, and
then stop. That was a bug. Now the generators just stop."
459,,,"There is no longer a BeautifulStoneSoup class for parsing XML. To
parse XML you pass in ""xml"" as the second argument to the
BeautifulSoup constructor. For the same reason, the
BeautifulSoup constructor no longer recognizes the isHTML
argument."
460,,,"Beautiful Soup's handling of empty-element XML tags has been
improved. Previously when you parsed XML you had to explicitly say
which tags were considered empty-element tags. The selfClosingTags
argument to the constructor is no longer recognized. Instead,
Beautiful Soup considers any empty tag to be an empty-element tag. If
you add a child to an empty-element tag, it stops being an
empty-element tag."
461,,,"An incoming HTML or XML entity is always converted into the
corresponding Unicode character. Beautiful Soup 3 had a number of
overlapping ways of dealing with entities, which have been
removed. The BeautifulSoup constructor no longer recognizes the
smartQuotesTo or convertEntities arguments. (Unicode,
Dammit still has smart_quotes_to, but its default is now to turn
smart quotes into Unicode.) The constants HTML_ENTITIES,
XML_ENTITIES, and XHTML_ENTITIES have been removed, since they
configure a feature (transforming some but not all entities into
Unicode characters) that no longer exists."
462,,,"If you want to turn Unicode characters back into HTML entities on
output, rather than turning them into UTF-8 characters, you need to
use an output formatter."
463,,,"Tag.string now operates recursively. If tag A
contains a single tag B and nothing else, then A.string is the same as
B.string. (Previously, it was None.)"
464,,,"Multi-valued attributes like class have lists of strings as
their values, not simple strings. This may affect the way you search by CSS
class."
465,,,"Tag objects now implement the __hash__ method, such that two
Tag objects are considered equal if they generate the same
markup. This may change your script's behavior if you put Tag
objects into a dictionary or set."
466,,,"If you pass one of the find* methods both string and
a tag-specific argument like name, Beautiful Soup will
search for tags that match your tag-specific criteria and whose
Tag.string matches your string
value. It will not find the strings themselves. Previously,
Beautiful Soup ignored the tag-specific arguments and looked for
strings."
467,,,"The BeautifulSoup constructor no longer recognizes the
markupMassage argument. It's now the parser's responsibility to
handle markup correctly."
468,,,"The rarely-used alternate parser classes like
ICantBelieveItsBeautifulSoup and BeautifulSOAP have been
removed. It's now the parser's decision how to handle ambiguous
markup."
469,,,"The prettify() method now returns a Unicode string, not a bytestring."
